# run.py
import logging
import sys
import os
from aiohttp import web
import asyncio
import threading
import config

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

async def health_handler(request):
    """Health check endpoint –¥–ª—è Render"""
    return web.json_response({
        "status": "healthy", 
        "service": "FinDotBot",
        "port": config.HEALTH_CHECK_PORT
    })

async def start_health_server():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    app.router.add_get('/health', health_handler)
    app.router.add_get('/', health_handler)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PORT –∑ config.py
    port = config.HEALTH_CHECK_PORT
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner, site

def main():
    """–ü—Ä–æ—Å—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FinDotBot –¥–ª—è Render...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å service account —Ñ–∞–π–ª—É
    if not os.path.exists(config.SERVICE_ACCOUNT_FILE):
        logger.error(f"Service account —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config.SERVICE_ACCOUNT_FILE}")
        if not config.SERVICE_ACCOUNT_JSON:
            logger.error("SERVICE_ACCOUNT_JSON –∑–º—ñ–Ω–Ω–∞ —Ç–∞–∫–æ–∂ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return
        logger.info("SERVICE_ACCOUNT_JSON –∑–Ω–∞–π–¥–µ–Ω–æ, —Ñ–∞–π–ª –º–∞—î –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
    
    async def run_all():
        # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
        runner, site = await start_health_server()
        
        try:
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            from finedot_bot import main as bot_main
            bot_main()  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise
        finally:
            await runner.cleanup()
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π event loop
    try:
        asyncio.run(run_all())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()