# run.py - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è Render
import asyncio
import logging
import sys
import os
from aiohttp import web
import signal

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class BotRunner:
    def __init__(self):
        self.bot_task = None
        self.web_app = None
        self.runner = None
        self.site = None
        self.shutdown_event = asyncio.Event()

    async def health_handler(self, request):
        """Health check endpoint"""
        return web.Response(text="FinDotBot is running!", status=200)

    async def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
        self.web_app = web.Application()
        self.web_app.router.add_get('/health', self.health_handler)
        self.web_app.router.add_get('/', self.health_handler)
        
        self.runner = web.AppRunner(self.web_app)
        await self.runner.setup()
        
        port = int(os.environ.get('PORT', 10000))
        self.site = web.TCPSite(self.runner, '0.0.0.0', port)
        await self.site.start()
        
        logger.info(f"Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            from finedot_bot import main as bot_main
            await bot_main()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise

    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ FinDotBot –∑ health check...")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            await self.start_web_server()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ç–∞—Å–∫—É
            self.bot_task = asyncio.create_task(self.start_bot())
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ —Å–∏–≥–Ω–∞–ª
            try:
                await asyncio.wait_for(self.shutdown_event.wait(), timeout=None)
            except asyncio.CancelledError:
                pass
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        logger.info("–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞
        if self.bot_task and not self.bot_task.done():
            self.bot_task.cancel()
            try:
                await asyncio.wait_for(self.bot_task, timeout=5.0)
            except (asyncio.TimeoutError, asyncio.CancelledError):
                pass
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if self.runner:
            await self.runner.cleanup()
        
        logger.info("–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. –ó—É–ø–∏–Ω—è—î–º–æ...")
        self.shutdown_event.set()

def main():
    """–ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–∞–π–≤–∏—Ö —É—Å–∫–ª–∞–¥–Ω–µ–Ω—å"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        try:
            from config import SERVICE_ACCOUNT_FILE, TOKEN
            
            if not os.path.exists(SERVICE_ACCOUNT_FILE):
                logger.warning(f"Service account —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {SERVICE_ACCOUNT_FILE}")
            
            if not TOKEN or TOKEN == '–≤–∞—à_telegram_bot_token':
                logger.warning("TOKEN –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except ImportError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É config: {e}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        runner = BotRunner()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
        if hasattr(signal, 'SIGTERM'):
            signal.signal(signal.SIGTERM, runner.signal_handler)
        if hasattr(signal, 'SIGINT'):
            signal.signal(signal.SIGINT, runner.signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ event loop
        try:
            asyncio.run(runner.run())
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            sys.exit(1)
        
    except Exception as e:
        logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()