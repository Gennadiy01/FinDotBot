import logging
import os
from datetime import datetime, timedelta
import asyncio
import tempfile
import subprocess
from typing import Optional, Dict, Any
import re

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from google.cloud import speech
from googleapiclient.discovery import build
from google.oauth2 import service_account
import config

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=getattr(logging, config.LOG_LEVEL, logging.INFO)
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
family_budget_amount = 0
user_last_actions = {}

class FinDotBot:
    def __init__(self):
        self.sheets_service = None
        self.speech_client = None
        self.setup_google_services()
        
    def setup_google_services(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google API —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            credentials = service_account.Credentials.from_service_account_file(
                config.SERVICE_ACCOUNT_FILE,
                scopes=['https://www.googleapis.com/auth/spreadsheets',
                       'https://www.googleapis.com/auth/cloud-platform']
            )
            
            self.sheets_service = build('sheets', 'v4', credentials=credentials)
            self.speech_client = speech.SpeechClient(credentials=credentials)
            
            logger.info("Google API —Å–µ—Ä–≤—ñ—Å–∏ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google API: {e}")
            raise

    def get_user_identifier(self, user) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user.username:
            return user.username
        return user.first_name or str(user.id)

    async def save_expense(self, category: str, amount: float, user_identifier: str, comment: str = "") -> bool:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ Google Sheets"""
        try:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            values = [[current_time, category, amount, user_identifier, comment]]
            
            body = {'values': values}
            
            result = self.sheets_service.spreadsheets().values().append(
                spreadsheetId=config.SPREADSHEET_ID,
                range=config.RANGE_NAME,
                valueInputOption='RAW',
                body=body
            ).execute()
            
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {category} {amount} –¥–ª—è {user_identifier}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
            return False

    async def get_expenses_data(self, user_filter: str = None, period_filter: str = None) -> list:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
        try:
            result = self.sheets_service.spreadsheets().values().get(
                spreadsheetId=config.SPREADSHEET_ID,
                range=config.RANGE_NAME
            ).execute()
            
            values = result.get('values', [])
            if not values or len(values) < 2:
                return []
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            data = values[1:]
            filtered_data = []
            
            for row in data:
                if len(row) < 4:
                    continue
                    
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
                if len(row) > 4 and '[IGNORED]' in str(row[4]):
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if user_filter and row[3] != user_filter:
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ –ø–µ—Ä—ñ–æ–¥—É
                if period_filter:
                    try:
                        record_date = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                        now = datetime.now()
                        
                        if period_filter == 'today':
                            if record_date.date() != now.date():
                                continue
                        elif period_filter == 'week':
                            start_of_week = now - timedelta(days=now.weekday())
                            if record_date.date() < start_of_week.date():
                                continue
                        elif period_filter == 'month':
                            if record_date.year != now.year or record_date.month != now.month:
                                continue
                        elif period_filter == 'year':
                            if record_date.year != now.year:
                                continue
                                
                    except ValueError:
                        continue
                
                filtered_data.append(row)
            
            return filtered_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return []

    async def convert_ogg_to_wav(self, ogg_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OGG –≤ WAV –¥–ª—è Google Speech API"""
        try:
            wav_path = ogg_path.replace('.ogg', '.wav')
            
            command = [
                'ffmpeg', '-i', ogg_path,
                '-acodec', 'pcm_s16le',
                '-ar', '16000',
                '-ac', '1',
                '-y', wav_path
            ]
            
            result = subprocess.run(command, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info("–ê—É–¥—ñ–æ —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ")
                return wav_path
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó FFmpeg: {result.stderr}")
                return None
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")
            return None

    async def recognize_speech(self, audio_path: str) -> Optional[str]:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É"""
        try:
            with open(audio_path, 'rb') as audio_file:
                content = audio_file.read()
            
            audio = speech.RecognitionAudio(content=content)
            config_speech = speech.RecognitionConfig(
                encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                sample_rate_hertz=16000,
                language_code=config.SPEECH_LANGUAGE,
                enable_automatic_punctuation=True,
            )
            
            response = self.speech_client.recognize(config=config_speech, audio=audio)
            
            if response.results:
                transcript = response.results[0].alternatives[0].transcript
                confidence = response.results[0].alternatives[0].confidence
                logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç: '{transcript}' (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.2f})")
                return transcript
            else:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
                return None
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏: {e}")
            return None

bot = FinDotBot()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
def get_main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
        [KeyboardButton("üìà –ó–∞ —Ç–∏–∂–¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –º—ñ—Å—è—Ü—å")],
        [KeyboardButton("üë´ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç"), KeyboardButton("üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")],
        [KeyboardButton("üìù –ú–æ—ó –∑–∞–ø–∏—Å–∏"), KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")],
        [KeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_management_keyboard():
    """Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data="undo")],
        [InlineKeyboardButton("üîï –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data="ignore")],
        [InlineKeyboardButton("üë• –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="compare")],
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É", callback_data="budget_status")],
        [InlineKeyboardButton("üèÖ –•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤", callback_data="whospent")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–Ω–æ–ø–æ–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é"""
    welcome_text = """
ü§ñ **–ü—Ä–∏–≤—ñ—Ç! –Ø FinDotBot** - –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç!

üí° **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**

üìù **–ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ [–ö–æ–º–µ–Ω—Ç–∞—Ä]`
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥: `–á–∂–∞ 250 –û–±—ñ–¥ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ`
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: –ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ

üìä **–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:**
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏:**
‚Ä¢ –°–∫–∞—Å—É–≤–∞—Ç–∏, —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

üéØ **–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏? –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –≤–∏—Ç—Ä–∞—Ç—É!**
"""
    
    await update.message.reply_text(
        welcome_text, 
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏"""
    help_text = """
‚ÑπÔ∏è **–î–æ–≤—ñ–¥–∫–∞ FinDotBot**

üìù **–§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å—É –≤–∏—Ç—Ä–∞—Ç:**
‚Ä¢ `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞` - –±–∞–∑–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä` - –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥–∏:
  - `–á–∂–∞ 150`
  - `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 50 –¢–∞–∫—Å—ñ –¥–æ–¥–æ–º—É`
  - `–†–æ–∑–≤–∞–≥–∏ 300 –ö—ñ–Ω–æ –∑ –¥—Ä—É–∑—è–º–∏`

üé§ **–ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ –ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ
‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ** - –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å
‚Ä¢ **–ó–∞ —Ç–∏–∂–¥–µ–Ω—å** - –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
‚Ä¢ **–ó–∞ –º—ñ—Å—è—Ü—å** - –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
‚Ä¢ **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –æ—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
‚Ä¢ **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π** - –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å

üë´ **–î–ª—è –ø–∞—Ä/—Å—ñ–º–µ–π:**
‚Ä¢ **–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç** - –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ **–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤** - –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç
‚Ä¢ **–•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤** - —Ä–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**
‚Ä¢ **–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π** - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å (–¥–æ 10 —Ö–≤)
‚Ä¢ **–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π** - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ **–ú–æ—ó –∑–∞–ø–∏—Å–∏** - –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤

üí° **–ü–æ—Ä–∞–¥–∏:**
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—ñ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
‚Ä¢ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–≥–∞–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –≤–∏—Ç—Ä–∞—Ç
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –±—é–¥–∂–µ—Ç—É
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_button_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    text = update.message.text
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await my_stats(update, context)
    elif text == "üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
        await today_stats(update, context)
    elif text == "üìà –ó–∞ —Ç–∏–∂–¥–µ–Ω—å":
        await week_stats(update, context)
    elif text == "üìÜ –ó–∞ –º—ñ—Å—è—Ü—å":
        await month_stats(update, context)
    elif text == "üë´ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç":
        await family_budget(update, context)
    elif text == "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π":
        await top_categories(update, context)
    elif text == "üìù –ú–æ—ó –∑–∞–ø–∏—Å–∏":
        await recent_records(update, context)
    elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è":
        await show_management(update, context)
    elif text == "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞":
        await help_command(update, context)
    else:
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—É –≤–∏—Ç—Ä–∞—Ç
        await handle_expense_text(update, context)

async def show_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    await update.message.reply_text(
        "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏**\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_management_keyboard(),
        parse_mode='Markdown'
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "undo":
        await undo_last_expense(update, context)
    elif query.data == "ignore":
        await ignore_last_expense(update, context)
    elif query.data == "compare":
        await compare_users(update, context)
    elif query.data == "budget_status":
        await budget_status(update, context)
    elif query.data == "whospent":
        await who_spent_more(update, context)

async def handle_expense_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –≤–∏—Ç—Ä–∞—Ç"""
    text = update.message.text.strip()
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ [–ö–æ–º–µ–Ω—Ç–∞—Ä]
    parts = text.split()
    if len(parts) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ [–ö–æ–º–µ–Ω—Ç–∞—Ä]`\n"
            "üìù –ü—Ä–∏–∫–ª–∞–¥: `–á–∂–∞ 250 –û–±—ñ–¥ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ`",
            parse_mode='Markdown'
        )
        return
    
    category = parts[0].lower()
    
    try:
        amount = float(parts[1])
        if amount <= 0:
            raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞!\n\n"
            "üí° –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –±—ñ–ª—å—à–µ 0\n"
            "üìù –ü—Ä–∏–∫–ª–∞–¥: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 50`"
        )
        return
    
    comment = ' '.join(parts[2:]) if len(parts) > 2 else ""
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏
    success = await bot.save_expense(category, amount, user_identifier, comment)
    
    if success:
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        user_last_actions[user_identifier] = {
            'type': 'expense',
            'category': category,
            'amount': amount,
            'comment': comment,
            'timestamp': datetime.now()
        }
        
        response = f"‚úÖ **–í–∏—Ç—Ä–∞—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\n"
        response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        response += f"üí∞ –°—É–º–∞: {amount:.2f} –≥—Ä–Ω\n"
        if comment:
            response += f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n"
        response += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_identifier}"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        if update.message.voice.duration > config.MAX_VOICE_DURATION:
            await update.message.reply_text(
                f"‚ùå –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ!\n\n"
                f"‚è±Ô∏è –ú–∞–∫—Å–∏–º—É–º: {config.MAX_VOICE_DURATION} —Å–µ–∫—É–Ω–¥\n"
                f"üìù –í–∞—à–µ: {update.message.voice.duration} —Å–µ–∫—É–Ω–¥"
            )
            return
        
        await update.message.reply_text("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        voice_file = await context.bot.get_file(update.message.voice.file_id)
        
        with tempfile.TemporaryDirectory() as temp_dir:
            ogg_path = os.path.join(temp_dir, "voice.ogg")
            await voice_file.download_to_drive(ogg_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OGG –≤ WAV
            wav_path = await bot.convert_ogg_to_wav(ogg_path)
            if not wav_path:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É")
                return
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            recognized_text = await bot.recognize_speech(wav_path)
            if not recognized_text:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fake update –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
            update.message.text = recognized_text
            await update.message.reply_text(f"üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: *{recognized_text}*", parse_mode='Markdown')
            
            # –û–±—Ä–æ–±–∫–∞ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
            await handle_expense_text(update, context)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å—É: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

# –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    data = await bot.get_expenses_data(user_filter=user_identifier, period_filter='month')
    
    if not data:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å")
        return
    
    total_amount = sum(float(row[2]) for row in data)
    record_count = len(data)
    avg_expense = total_amount / record_count if record_count > 0 else 0
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for row in data:
        category = row[1]
        amount = float(row[2])
        categories[category] = categories.get(category, 0) + amount
    
    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ —Å—É–º–æ—é
    sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
    
    response = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:**\n\n"
    response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:.2f} –≥—Ä–Ω\n"
    response += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {record_count}\n"
    response += f"üìÖ –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} –≥—Ä–Ω\n\n"
    response += f"üìÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:**\n"
    
    for category, amount in sorted_categories:
        percentage = (amount / total_amount) * 100
        response += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def today_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
    data = await bot.get_expenses_data(period_filter='today')
    
    if not data:
        await update.message.reply_text("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏")
        return
    
    total_amount = sum(float(row[2]) for row in data)
    record_count = len(data)
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    for row in data:
        user = row[3]
        amount = float(row[2])
        users[user] = users.get(user, 0) + amount
    
    response = f"üìÖ **–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:**\n\n"
    response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:.2f} –≥—Ä–Ω\n"
    response += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {record_count}\n\n"
    
    if len(users) > 1:
        response += f"üë• **–ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö:**\n"
        for user, amount in sorted(users.items(), key=lambda x: x[1], reverse=True):
            response += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def week_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"""
    data = await bot.get_expenses_data(period_filter='week')
    
    if not data:
        await update.message.reply_text("üìà –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤")
        return
    
    total_amount = sum(float(row[2]) for row in data)
    record_count = len(data)
    
    response = f"üìà **–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:**\n\n"
    response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:.2f} –≥—Ä–Ω\n"
    response += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {record_count}\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å
    days_in_week = 7
    avg_per_day = total_amount / days_in_week
    monthly_projection = avg_per_day * 30
    
    response += f"üìä –°–µ—Ä–µ–¥–Ω—å–æ –∑–∞ –¥–µ–Ω—å: {avg_per_day:.2f} –≥—Ä–Ω\n"
    response += f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å: {monthly_projection:.2f} –≥—Ä–Ω"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def month_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    data = await bot.get_expenses_data(period_filter='month')
    
    if not data:
        await update.message.reply_text("üìÜ –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤")
        return
    
    total_amount = sum(float(row[2]) for row in data)
    record_count = len(data)
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for row in data:
        category = row[1]
        amount = float(row[2])
        categories[category] = categories.get(category, 0) + amount
    
    sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
    
    response = f"üìÜ **–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:**\n\n"
    response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:.2f} –≥—Ä–Ω\n"
    response += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {record_count}\n\n"
    response += f"üìÇ **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:**\n"
    
    for i, (category, amount) in enumerate(sorted_categories[:5], 1):
        percentage = (amount / total_amount) * 100
        response += f"{i}. {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def top_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å"""
    data = await bot.get_expenses_data(period_filter='month')
    
    if not data:
        await update.message.reply_text("üèÜ –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        return
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    category_counts = {}
    
    for row in data:
        category = row[1]
        amount = float(row[2])
        categories[category] = categories.get(category, 0) + amount
        category_counts[category] = category_counts.get(category, 0) + 1
    
    sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
    total_amount = sum(categories.values())
    
    response = f"üèÜ **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:**\n\n"
    
    for i, (category, amount) in enumerate(sorted_categories, 1):
        percentage = (amount / total_amount) * 100
        count = category_counts[category]
        avg_per_record = amount / count
        
        response += f"**{i}. {category.upper()}**\n"
        response += f"üí∞ –°—É–º–∞: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        response += f"üìù –ó–∞–ø–∏—Å—ñ–≤: {count}\n"
        response += f"üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_per_record:.2f} –≥—Ä–Ω\n\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def recent_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    data = await bot.get_expenses_data(user_filter=user_identifier)
    
    if not data:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤")
        return
    
    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
    data.sort(key=lambda x: x[0], reverse=True)
    recent_data = data[:5]
    
    response = f"üìù **–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤:**\n\n"
    
    for i, row in enumerate(recent_data, 1):
        date_time = row[0]
        category = row[1]
        amount = float(row[2])
        comment = row[4] if len(row) > 4 and row[4] else ""
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
        try:
            dt = datetime.strptime(date_time, "%Y-%m-%d %H:%M:%S")
            formatted_date = dt.strftime("%d.%m %H:%M")
        except:
            formatted_date = date_time
        
        response += f"**{i}. {category}** - {amount:.2f} –≥—Ä–Ω\n"
        response += f"üïê {formatted_date}"
        if comment and not '[IGNORED]' in comment:
            response += f" | üí¨ {comment}"
        response += "\n\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä/—Å—ñ–º–µ–π
async def family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç"""
    data = await bot.get_expenses_data(period_filter='month')
    
    if not data:
        await update.message.reply_text("üë´ –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —â–µ –Ω–µ–º–∞—î —Å—ñ–º–µ–π–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç")
        return
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    total_amount = 0
    
    for row in data:
        user = row[3]
        amount = float(row[2])
        users[user] = users.get(user, 0) + amount
        total_amount += amount
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
    week_data = await bot.get_expenses_data(period_filter='week')
    week_total = sum(float(row[2]) for row in week_data)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å
    days_in_month = 30
    days_passed = datetime.now().day
    daily_avg = total_amount / days_passed if days_passed > 0 else 0
    monthly_projection = daily_avg * days_in_month
    
    response = f"üë´ **–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑–∞ –º—ñ—Å—è—Ü—å:**\n\n"
    response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_amount:.2f} –≥—Ä–Ω\n"
    response += f"üìà –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {week_total:.2f} –≥—Ä–Ω\n"
    response += f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å: {monthly_projection:.2f} –≥—Ä–Ω\n\n"
    
    if len(users) > 1:
        response += f"üë• **–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —á–ª–µ–Ω–∞—Ö —Å—ñ–º'—ó:**\n"
        for user, amount in sorted(users.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total_amount) * 100
            response += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        
        # –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –ø–µ—Ä—à–∏–º —ñ –¥—Ä—É–≥–∏–º
        if len(users) >= 2:
            sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
            difference = sorted_users[0][1] - sorted_users[1][1]
            response += f"\nüí° –†—ñ–∑–Ω–∏—Ü—è: {difference:.2f} –≥—Ä–Ω"
    
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = {}
    for row in data:
        category = row[1]
        amount = float(row[2])
        categories[category] = categories.get(category, 0) + amount
    
    top_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)[:3]
    response += f"\n\nüìÇ **–û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
    for category, amount in top_categories:
        percentage = (amount / total_amount) * 100
        response += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def compare_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    data = await bot.get_expenses_data(period_filter='month')
    
    if not data:
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text("üë• –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        else:
            await update.message.reply_text("üë• –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        return
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users_stats = {}
    
    for row in data:
        user = row[3]
        amount = float(row[2])
        category = row[1]
        
        if user not in users_stats:
            users_stats[user] = {
                'total': 0,
                'count': 0,
                'categories': {}
            }
        
        users_stats[user]['total'] += amount
        users_stats[user]['count'] += 1
        users_stats[user]['categories'][category] = users_stats[user]['categories'].get(category, 0) + amount
    
    response = f"üë• **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å:**\n\n"
    
    for user, stats in sorted(users_stats.items(), key=lambda x: x[1]['total'], reverse=True):
        avg_expense = stats['total'] / stats['count']
        top_category = max(stats['categories'].items(), key=lambda x: x[1])
        
        response += f"**üë§ {user}:**\n"
        response += f"üí∞ –ó–∞–≥–∞–ª–æ–º: {stats['total']:.2f} –≥—Ä–Ω\n"
        response += f"üìù –ó–∞–ø–∏—Å—ñ–≤: {stats['count']}\n"
        response += f"üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} –≥—Ä–Ω\n"
        response += f"üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {top_category[0]} ({top_category[1]:.2f} –≥—Ä–Ω)\n\n"
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_all = sum(stats['total'] for stats in users_stats.values())
    response += f"üí´ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö: {total_all:.2f} –≥—Ä–Ω**"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text(response, parse_mode='Markdown')

async def who_spent_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
    period = 'month'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º—ñ—Å—è—Ü—å
    if context.args and len(context.args) > 0:
        period_arg = context.args[0].lower()
        if period_arg in ['today', 'week', 'month', 'year']:
            period = period_arg
    
    data = await bot.get_expenses_data(period_filter=period)
    
    if not data:
        message_text = f"üèÖ –ó–∞ –ø–µ—Ä—ñ–æ–¥ '{period}' —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    for row in data:
        user = row[3]
        amount = float(row[2])
        users[user] = users.get(user, 0) + amount
    
    if len(users) < 2:
        message_text = "üèÖ –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return
    
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    
    period_names = {
        'today': '—Å—å–æ–≥–æ–¥–Ω—ñ',
        'week': '—Ç–∏–∂–¥–µ–Ω—å',
        'month': '–º—ñ—Å—è—Ü—å',
        'year': '—Ä—ñ–∫'
    }
    
    response = f"üèÖ **–†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_names.get(period, period)}:**\n\n"
    
    medals = ['ü•á', 'ü•à', 'ü•â']
    for i, (user, amount) in enumerate(sorted_users):
        medal = medals[i] if i < 3 else f"{i+1}."
        response += f"{medal} **{user}**: {amount:.2f} –≥—Ä–Ω\n"
    
    # –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –ø–µ—Ä—à–∏–º —ñ –¥—Ä—É–≥–∏–º
    if len(sorted_users) >= 2:
        difference = sorted_users[0][1] - sorted_users[1][1]
        response += f"\nüí° –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ 1-–º —ñ 2-–º –º—ñ—Å—Ü–µ–º: {difference:.2f} –≥—Ä–Ω"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text(response, parse_mode='Markdown')

async def set_family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if context.args and len(context.args) > 0:
        try:
            budget = float(context.args[0])
            if budget <= 0:
                raise ValueError("–ë—é–¥–∂–µ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            
            family_budget_amount = budget
            
            response = f"üí∞ **–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            response += f"üéØ –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {budget:.2f} –≥—Ä–Ω\n"
            response += f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É' –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –±—é–¥–∂–µ—Ç—É!\n\n"
                "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É' –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å: /budget 5000"
            )
    else:
        await update.message.reply_text(
            "üí∞ **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É**\n\n"
            "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /budget [—Å—É–º–∞]\n"
            "üìù –ü—Ä–∏–∫–ª–∞–¥: /budget 5000"
        )

async def budget_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if family_budget_amount <= 0:
        message_text = (
            "üí∞ **–ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**\n\n"
            "üìù –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ—é:\n"
            "/budget [—Å—É–º–∞]\n\n"
            "üìù –ü—Ä–∏–∫–ª–∞–¥: /budget 5000"
        )
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, parse_mode='Markdown')
        return
    
    # –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
    data = await bot.get_expenses_data(period_filter='month')
    spent_amount = sum(float(row[2]) for row in data) if data else 0
    
    remaining = family_budget_amount - spent_amount
    spent_percentage = (spent_amount / family_budget_amount) * 100
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
    now = datetime.now()
    days_in_month = (datetime(now.year, now.month + 1, 1) - timedelta(days=1)).day
    days_remaining = days_in_month - now.day
    daily_limit = remaining / days_remaining if days_remaining > 0 else 0
    
    # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    progress_length = 10
    filled_length = int(progress_length * spent_percentage / 100)
    progress_bar = "‚ñà" * filled_length + "‚ñë" * (progress_length - filled_length)
    
    response = f"üí∞ **–°—Ç–∞—Ç—É—Å —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É:**\n\n"
    response += f"üéØ –ë—é–¥–∂–µ—Ç: {family_budget_amount:.2f} –≥—Ä–Ω\n"
    response += f"üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent_amount:.2f} –≥—Ä–Ω\n"
    response += f"üíö –ó–∞–ª–∏—à–æ–∫: {remaining:.2f} –≥—Ä–Ω\n\n"
    response += f"üìä –í–∏–∫–æ–Ω–∞–Ω–Ω—è: {spent_percentage:.1f}%\n"
    response += f"[{progress_bar}]\n\n"
    
    if days_remaining > 0:
        response += f"üìÖ –î–Ω—ñ–≤ –¥–æ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è: {days_remaining}\n"
        response += f"üí° –î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç: {daily_limit:.2f} –≥—Ä–Ω"
        
        if daily_limit < 0:
            response += "\n\n‚ö†Ô∏è **–£–≤–∞–≥–∞!** –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ!"
        elif spent_percentage > 80:
            response += "\n\nüî∂ **–û–±–µ—Ä–µ–∂–Ω–æ!** –í–∏—Ç—Ä–∞—á–µ–Ω–æ –±—ñ–ª—å—à–µ 80% –±—é–¥–∂–µ—Ç—É"
    else:
        response += "\nüèÅ –ú—ñ—Å—è—Ü—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text(response, parse_mode='Markdown')

# –§—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏
async def undo_last_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É"""
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥—ñ—è
    if user_identifier not in user_last_actions:
        message_text = "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return
    
    last_action = user_last_actions[user_identifier]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É (–¥–æ 10 —Ö–≤–∏–ª–∏–Ω)
    time_diff = datetime.now() - last_action['timestamp']
    if time_diff.total_seconds() > 600:  # 10 —Ö–≤–∏–ª–∏–Ω
        message_text = "‚ùå –ß–∞—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω)"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
        result = bot.sheets_service.spreadsheets().values().get(
            spreadsheetId=config.SPREADSHEET_ID,
            range=config.RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if len(values) < 2:
            message_text = "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_row_index = None
        for i in range(len(values) - 1, 0, -1):  # –ô–¥–µ–º–æ –∑ –∫—ñ–Ω—Ü—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            row = values[i]
            if (len(row) >= 4 and 
                row[3] == user_identifier and 
                row[1] == last_action['category'] and 
                float(row[2]) == last_action['amount']):
                last_row_index = i + 1  # Google Sheets –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 1-based indexing
                break
        
        if last_row_index is None:
            message_text = "‚ùå –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
        bot.sheets_service.spreadsheets().batchUpdate(
            spreadsheetId=config.SPREADSHEET_ID,
            body={
                'requests': [{
                    'deleteDimension': {
                        'range': {
                            'sheetId': 0,
                            'dimension': 'ROWS',
                            'startIndex': last_row_index - 1,
                            'endIndex': last_row_index
                        }
                    }
                }]
            }
        ).execute()
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É
        del user_last_actions[user_identifier]
        
        response = f"‚úÖ **–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ!**\n\n"
        response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
        response += f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
        else:
            await update.message.reply_text(response, parse_mode='Markdown')
        
        logger.info(f"–°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è {user_identifier}: {last_action}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É: {e}")
        message_text = "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)

async def ignore_last_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É"""
    user = update.effective_user
    user_identifier = bot.get_user_identifier(user)
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
        result = bot.sheets_service.spreadsheets().values().get(
            spreadsheetId=config.SPREADSHEET_ID,
            range=config.RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if len(values) < 2:
            message_text = "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_row_index = None
        last_row_data = None
        
        for i in range(len(values) - 1, 0, -1):
            row = values[i]
            if len(row) >= 4 and row[3] == user_identifier:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π –≤–∂–µ
                if len(row) <= 4 or '[IGNORED]' not in str(row[4]):
                    last_row_index = i + 1
                    last_row_data = row
                    break
        
        if last_row_index is None:
            message_text = "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∂–µ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑ –º—ñ—Ç–∫–æ—é [IGNORED]
        current_comment = last_row_data[4] if len(last_row_data) > 4 else ""
        new_comment = f"{current_comment} [IGNORED]".strip()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
        bot.sheets_service.spreadsheets().values().update(
            spreadsheetId=config.SPREADSHEET_ID,
            range=f"E{last_row_index}",
            valueInputOption='RAW',
            body={'values': [[new_comment]]}
        ).execute()
        
        response = f"üîï **–ó–∞–ø–∏—Å —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ!**\n\n"
        response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_row_data[1]}\n"
        response += f"üí∞ –°—É–º–∞: {float(last_row_data[2]):.2f} –≥—Ä–Ω\n"
        response += f"üí° –ó–∞–ø–∏—Å –Ω–µ –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
        else:
            await update.message.reply_text(response, parse_mode='Markdown')
        
        logger.info(f"–Ü–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è {user_identifier}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É: {e}")
        message_text = "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)

async def test_sheets_access():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets"""
    try:
        result = bot.sheets_service.spreadsheets().values().get(
            spreadsheetId=config.SPREADSHEET_ID,
            range="A1:A1"
        ).execute()
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets: {e}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    if not os.path.exists(config.SERVICE_ACCOUNT_FILE):
        logger.error(f"–§–∞–π–ª —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config.SERVICE_ACCOUNT_FILE}")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets
    try:
        await test_sheets_access()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets: {e}")
    
    app = Application.builder().token(config.TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("budget", set_family_budget))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_text))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    logger.info("‚úÖ FinDotBot –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë FinDotBot –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise