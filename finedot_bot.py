import logging
import datetime
import os
import tempfile
import subprocess
import asyncio
import re
import platform
import signal
import sys
import time
from datetime import timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.helpers import escape_markdown
from telegram.request import HTTPXRequest
from telegram.error import TimedOut, NetworkError
from telegram.error import Conflict

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from google.cloud import speech

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import (
    TOKEN, 
    SPREADSHEET_ID, 
    RANGE_NAME, 
    SERVICE_ACCOUNT_FILE,
    SPEECH_LANGUAGE,
    LOG_LEVEL,
    MAX_VOICE_DURATION,
    FFMPEG_TIMEOUT,
    GOOGLE_API_TIMEOUT
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è memory leak)
from collections import OrderedDict
user_last_actions = OrderedDict()
MAX_USER_ACTIONS = 50  # –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

def add_user_action(user_id, action):
    """–î–æ–¥–∞—î –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤"""
    if len(user_last_actions) >= MAX_USER_ACTIONS:
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—à–∏–π –∑–∞–ø–∏—Å
        user_last_actions.popitem(last=False)
        logger.debug(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ user_last_actions, –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {len(user_last_actions)}")
    
    user_last_actions[user_id] = action

def cleanup_old_actions():
    """–ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥—ñ–π"""
    while len(user_last_actions) > MAX_USER_ACTIONS // 2:  # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–ª–æ–≤–∏–Ω—É
        user_last_actions.popitem(last=False)
    logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–æ cleanup user_last_actions, –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {len(user_last_actions)}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
family_budget_amount = 0

# –ö–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑'—î–¥–Ω–∞–Ω—å
class ConnectionMonitor:
    def __init__(self):
        self.start_time = time.time()
        self.request_count = 0
        self.error_count = 0
    
    def log_request(self):
        self.request_count += 1
        if self.request_count % 100 == 0:
            uptime = time.time() - self.start_time
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.request_count} –∑–∞–ø–∏—Ç—ñ–≤, "
                       f"{self.error_count} –ø–æ–º–∏–ª–æ–∫, uptime: {uptime/3600:.1f}h")
    
    def log_error(self):
        self.error_count += 1

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä
monitor = ConnectionMonitor()

# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø REPLY –ö–ù–û–ü–û–ö ===

def create_persistent_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç—ñ–π–Ω—É reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ú–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üü© üìã –ú–ï–ù–Æ üìã üü©")]
    ]
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º–∏
        one_time_keyboard=False  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    )

def remove_keyboard():
    """–í–∏–¥–∞–ª—è—î reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"""
    from telegram import ReplyKeyboardRemove
    return ReplyKeyboardRemove()

# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø INLINE –ö–ù–û–ü–û–ö ===

def create_main_menu():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_my_stats")],
        [InlineKeyboardButton("üë´ –°—ñ–º–µ–π–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_family_stats")],
        [InlineKeyboardButton("üìÖ –ó–∞ –ø–µ—Ä—ñ–æ–¥–∞–º–∏", callback_data="menu_periods")],
        [InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="menu_budget")],
        [InlineKeyboardButton("üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", callback_data="menu_management")],
        [InlineKeyboardButton("‚ùì –î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_my_stats_menu():
    """–ü—ñ–¥–º–µ–Ω—é –æ—Å–æ–±–∏—Å—Ç–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å", callback_data="cmd_mystats")],
        [InlineKeyboardButton("üìù –ú–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏", callback_data="cmd_recent")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_family_stats_menu():
    """–ü—ñ–¥–º–µ–Ω—é —Å—ñ–º–µ–π–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="cmd_family")],
        [InlineKeyboardButton("üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç", callback_data="cmd_compare")],
        [InlineKeyboardButton("üèÜ –•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤", callback_data="cmd_whospent")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_periods_menu():
    """–ü—ñ–¥–º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="cmd_today")],
        [InlineKeyboardButton("üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="cmd_week")],
        [InlineKeyboardButton("üìÖ –ú—ñ—Å—è—Ü—å", callback_data="cmd_month")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="cmd_top")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_budget_menu():
    """–ü—ñ–¥–º–µ–Ω—é –±—é–¥–∂–µ—Ç—É"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É", callback_data="cmd_budget_status")],
        [InlineKeyboardButton("‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="help_budget")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_management_menu():
    """–ü—ñ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚Ü∂ –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="cmd_undo")],
        [InlineKeyboardButton("üîï –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π", callback_data="cmd_ignore")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –ë–ï–ó–ü–ï–ß–ù–Ü –§–£–ù–ö–¶–Ü–á ===

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –±–æ—Ç–∞
async def safe_bot_operation(operation, max_retries=3):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é retry –ª–æ–≥—ñ–∫–æ—é"""
    for attempt in range(max_retries):
        try:
            monitor.log_request()
            return await operation()
            
        except Exception as e:
            monitor.log_error()
            error_msg = str(e).lower()
            
            # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
            if "conflict" in error_msg or "terminated by other getupdates" in error_msg:
                logger.warning(f"üîÑ –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
                
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt + 5  # 5, 7, 11 —Å–µ–∫—É–Ω–¥
                    logger.info(f"‚è∞ –ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó (–∫–æ–Ω—Ñ–ª—ñ–∫—Ç)")
                    raise
            
            # –û–±—Ä–æ–±–∫–∞ timeout –ø–æ–º–∏–ª–æ–∫
            elif "timeout" in error_msg or "timed out" in error_msg:
                logger.warning(f"‚è∞ Timeout –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
                
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
                else:
                    logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (timeout)")
                    raise
            
            # –û–±—Ä–æ–±–∫–∞ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–≤–∫–ª—é—á–∞—é—á–∏ httpx.ReadError)
            elif any(keyword in error_msg for keyword in ["network", "connection", "unreachable", "failed to connect", "readerror", "readtimeout"]):
                logger.warning(f"üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
                
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt + 1  # 1, 3, 5 —Å–µ–∫—É–Ω–¥
                    logger.info(f"‚è∞ –ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (–º–µ—Ä–µ–∂–∞)")
                    raise
            
            # –û–±—Ä–æ–±–∫–∞ rate limit –ø–æ–º–∏–ª–æ–∫
            elif "rate limit" in error_msg or "too many requests" in error_msg:
                logger.warning(f"üö¶ Rate limit –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
                
                if attempt < max_retries - 1:
                    wait_time = 5 * (attempt + 1)  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
                    logger.info(f"‚è∞ Rate limit: —á–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (rate limit)")
                    raise
            
            # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ
            else:
                logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {e}")
                raise

# –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
async def safe_send_message(update, context, text, **kwargs):
    """–ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é"""
    async def send_operation():
        # –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ reply_markup, –¥–æ–¥–∞—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        if 'reply_markup' not in kwargs:
            kwargs['reply_markup'] = create_persistent_keyboard()
        return await update.message.reply_text(text, **kwargs)
    
    try:
        return await safe_bot_operation(send_operation)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        # Fallback - —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
        try:
            return await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É")
        except:
            logger.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")

# –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è callback
async def safe_send_callback_message(query, text, **kwargs):
    """–ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ callback query"""
    try:
        if 'reply_markup' in kwargs:
            return await query.edit_message_text(text, **kwargs)
        else:
            return await query.edit_message_text(text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ callback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        try:
            await query.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É")
        except:
            logger.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑ callback query")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è FFmpeg
def get_ffmpeg_path():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å FFmpeg —É —Å–∏—Å—Ç–µ–º—ñ –∞–±–æ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ø–∞–ø—Ü—ñ"""
    # –°–ø—Ä–æ–±—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π FFmpeg
    local_ffmpeg = os.path.join(os.getcwd(), "ffmpeg", "bin", "ffmpeg.exe")
    if os.path.exists(local_ffmpeg):
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω–∏–π FFmpeg: {local_ffmpeg}")
        return local_ffmpeg
    
    # –°–ø—Ä–æ–±—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π FFmpeg
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True, text=True, timeout=10)
        logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω–∏–π FFmpeg")
        return "ffmpeg"
    except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
        logger.warning("FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ timeout")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —à–ª—è—Ö—É FFmpeg
FFMPEG_PATH = get_ffmpeg_path()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets API
try:
    creds = Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    logger.info("Google Sheets API –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets API: {e}")
    raise

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Speech-to-Text API
try:
    speech_client = speech.SpeechClient.from_service_account_file(SERVICE_ACCOUNT_FILE)
    logger.info("Google Speech-to-Text API –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Speech-to-Text API: {e}")
    raise

def create_application():
    """–°—Ç–≤–æ—Ä—é—î Application –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    from config import TELEGRAM_POOL_SIZE, TELEGRAM_TIMEOUT, TELEGRAM_READ_TIMEOUT
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTPXRequest –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    request = HTTPXRequest(
        connection_pool_size=TELEGRAM_POOL_SIZE,
        read_timeout=TELEGRAM_READ_TIMEOUT,
        write_timeout=TELEGRAM_TIMEOUT,
        connect_timeout=TELEGRAM_TIMEOUT
    )
    
    application = (
        Application.builder()
        .token(TOKEN)
        .request(request)
        .build()
    )
    
    logger.info(f"Application —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ HTTPXRequest –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ (pool_size={TELEGRAM_POOL_SIZE}, timeout={TELEGRAM_TIMEOUT})")
    return application

def signal_handler(signum, frame):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
    sys.exit(0)

# === –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó GOOGLE SHEETS ===

def get_all_expenses():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏—Ç—Ä–∞—Ç –∑ Google Sheets"""
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            return []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏
        expenses = []
        for row in values[1:]:
            if len(row) >= 3:
                try:
                    date_str = row[0]
                    category = row[1]
                    amount = float(row[2])
                    user = row[3] if len(row) > 3 else "Unknown"
                    comment = row[4] if len(row) > 4 else ""
                    
                    # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É
                    date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                    
                    expenses.append({
                        'date': date_obj,
                        'category': category,
                        'amount': amount,
                        'user': user,
                        'comment': comment
                    })
                except (ValueError, IndexError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å: {row}, –ø–æ–º–∏–ª–∫–∞: {e}")
                    continue
        
        return expenses
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç: {e}")
        return []

def filter_expenses_by_period(expenses, period_type, user_filter=None, include_ignored=False):
    """–§—ñ–ª—å—Ç—Ä—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º"""
    now = datetime.datetime.now()
    
    if period_type == "day":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "week":
        # –¢–∏–∂–¥–µ–Ω—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞
        days_since_monday = now.weekday()
        start_date = (now - timedelta(days=days_since_monday)).replace(hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "month":
        start_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "prev_month":
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å
        if now.month == 1:
            start_date = now.replace(year=now.year - 1, month=12, day=1, hour=0, minute=0, second=0, microsecond=0)
            end_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        else:
            start_date = now.replace(month=now.month - 1, day=1, hour=0, minute=0, second=0, microsecond=0)
            end_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "year":
        start_date = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        return expenses
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –ø–µ—Ä—ñ–æ–¥—É
    if period_type == "prev_month":
        filtered = [exp for exp in expenses if start_date <= exp['date'] < end_date]
    else:
        filtered = [exp for exp in expenses if exp['date'] >= start_date]
    
    # –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if user_filter:
        filtered = [exp for exp in filtered if exp['user'] == user_filter]
    
    # –í–∏–∫–ª—é—á–∞—î–º–æ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ (—è–∫—â–æ –Ω–µ –∑–∞–ø–∏—Ç–∞–ª–∏ —ó—Ö –≤–∫–ª—é—á–∏—Ç–∏)
    if not include_ignored:
        filtered = [exp for exp in filtered if not ('[IGNORED]' in exp.get('comment', ''))]
    
    return filtered

def generate_stats_message(expenses, period_name, user_filter=None):
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
    if not expenses:
        return f"–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_name.lower()}."
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
    total = sum(exp['amount'] for exp in expenses)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for exp in expenses:
        category = exp['category']
        categories[category] = categories.get(category, 0) + exp['amount']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    for exp in expenses:
        user = exp['user']
        users[user] = users.get(user, 0) + exp['amount']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}"
    if user_filter:
        message += f" (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_filter})"
    message += ":\n\n"
    
    message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω\n"
    message += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(expenses)}\n"
    message += f"üìÖ –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {total/len(expenses):.2f} –≥—Ä–Ω\n\n"
    
    # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    message += "üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n"
    for category, amount in sorted(categories.items(), key=lambda x: x[1], reverse=True):
        percentage = (amount / total) * 100
        message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    # –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö (—è–∫—â–æ –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–º—É)
    if not user_filter and len(users) > 1:
        message += "\nüë§ –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö:\n"
        for user, amount in sorted(users.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total) * 100
            message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    return message

# === –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –û–ë–†–û–ë–ö–ò –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ===

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é"""
    menu_message = "ü§ñ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:"
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–Ω—é –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await update.message.reply_text(
        menu_message, 
        reply_markup=create_main_menu()
    )

# === –û–ë–†–û–ë–ù–ò–ö CALLBACK –ó–ê–ü–ò–¢–Ü–í ===

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        # –ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é
        if data == "close_menu":
            await query.delete_message()
            return
        
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if data == "main_menu":
            await safe_send_callback_message(
                query, 
                "ü§ñ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:", 
                reply_markup=create_main_menu()
            )
        
        # –ü—ñ–¥–º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é –∑–∞–∫—Ä–∏—Ç—Ç—è
        elif data == "menu_my_stats":
            keyboard = [
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å", callback_data="cmd_mystats")],
                [InlineKeyboardButton("üìÖ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="cmd_mystats_prev")],
                [InlineKeyboardButton("üìù –ú–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏", callback_data="cmd_recent")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query, 
                "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", 
                reply_markup=menu_markup
            )
        
        elif data == "menu_family_stats":
            keyboard = [
                [InlineKeyboardButton("üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç", callback_data="cmd_family")],
                [InlineKeyboardButton("üìÖ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="cmd_family_prev")],
                [InlineKeyboardButton("üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç", callback_data="cmd_compare")],
                [InlineKeyboardButton("üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="cmd_compare_prev")],
                [InlineKeyboardButton("üèÜ –•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤", callback_data="cmd_whospent")],
                [InlineKeyboardButton("üèÜ –•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="cmd_whospent_prev")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query, 
                "üë´ –°—ñ–º–µ–π–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", 
                reply_markup=menu_markup
            )
        
        elif data == "menu_periods":
            keyboard = [
                [InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="cmd_today")],
                [InlineKeyboardButton("üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="cmd_week")],
                [InlineKeyboardButton("üìÖ –ú—ñ—Å—è—Ü—å", callback_data="cmd_month")],
                [InlineKeyboardButton("üìÖ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", callback_data="cmd_prev_month")],
                [InlineKeyboardButton("üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="cmd_top")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query, 
                "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∞–º–∏:", 
                reply_markup=menu_markup
            )
        
        elif data == "menu_budget":
            keyboard = [
                [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É", callback_data="cmd_budget_status")],
                [InlineKeyboardButton("‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="help_budget")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query, 
                "üí∞ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º:", 
                reply_markup=menu_markup
            )
        
        elif data == "menu_management":
            keyboard = [
                [InlineKeyboardButton("‚Ü∂ –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="cmd_undo")],
                [InlineKeyboardButton("üîï –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π", callback_data="cmd_ignore")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            menu_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query, 
                "üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏:", 
                reply_markup=menu_markup
            )
        
        # –ö–æ–º–∞–Ω–¥–∏
        elif data.startswith("cmd_"):
            command = data.replace("cmd_", "")
            await execute_command_from_callback(query, command, context)
        
        # –î–æ–≤—ñ–¥–∫–∞
        elif data == "help":
            await show_help(query)
        
        elif data == "help_budget":
            keyboard = [
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_budget")],
                [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
            ]
            help_markup = InlineKeyboardMarkup(keyboard)
            await safe_send_callback_message(
                query,
                "üí∞ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É:\n\n"
                "–î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/budget 15000\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: /budget 20000 –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç 20000 –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å",
                reply_markup=help_markup
            )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback: {e}")
        await query.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def execute_command_from_callback(query, command, context):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É –∑ callback –∫–Ω–æ–ø–∫–∏"""
    if command == "mystats":
        await my_stats_callback(query, context)
    elif command == "mystats_prev":
        await my_stats_prev_month_callback(query, context)
    elif command == "recent":
        await show_recent_expenses_callback(query, context)
    elif command == "family":
        await family_budget_callback(query, context)
    elif command == "family_prev":
        await family_budget_prev_month_callback(query, context)
    elif command == "compare":
        await compare_users_callback(query, context)
    elif command == "compare_prev":
        await compare_users_prev_month_callback(query, context)
    elif command == "whospent":
        await who_spent_more_callback(query, context)
    elif command == "whospent_prev":
        await who_spent_more_prev_month_callback(query, context)
    elif command == "today":
        await stats_today_callback(query, context)
    elif command == "week":
        await stats_week_callback(query, context)
    elif command == "month":
        await stats_month_callback(query, context)
    elif command == "prev_month":
        await stats_prev_month_callback(query, context)
    elif command == "top":
        await top_categories_callback(query, context)
    elif command == "budget_status":
        await budget_status_callback(query, context)
    elif command == "undo":
        await undo_last_action_callback(query, context)
    elif command == "ignore":
        await mark_as_ignored_callback(query, context)

# === CALLBACK –§–£–ù–ö–¶–Ü–á ===

async def my_stats_callback(query, context):
    """–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    user = query.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month", user_name)
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å", user_name)
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_my_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    back_button = InlineKeyboardMarkup(keyboard)
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def my_stats_prev_month_callback(query, context):
    """–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    user = query.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "prev_month", user_name)
    message = generate_stats_message(filtered_expenses, "–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å", user_name)
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_my_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    back_button = InlineKeyboardMarkup(keyboard)
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def show_recent_expenses_callback(query, context):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ callback"""
    user = query.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            message = "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
        else:
            user_expenses = []
            for i, row in enumerate(values[1:], 2):
                if len(row) >= 4 and row[3] == user_name:
                    try:
                        date_obj = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                        user_expenses.append({
                            'row': i,
                            'date': date_obj,
                            'category': row[1],
                            'amount': float(row[2]),
                            'comment': row[4] if len(row) > 4 else "",
                            'is_ignored': len(row) > 4 and '[IGNORED]' in row[4]
                        })
                    except (ValueError, IndexError):
                        continue
            
            if not user_expenses:
                message = "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
            else:
                user_expenses.sort(key=lambda x: x['date'], reverse=True)
                recent_expenses = user_expenses[:5]
                
                message = "üìù –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:\n\n"
                for i, exp in enumerate(recent_expenses, 1):
                    ignored_mark = "üîï " if exp['is_ignored'] else ""
                    message += f"{i}. {ignored_mark}{exp['category']}: {exp['amount']:.2f} –≥—Ä–Ω"
                    if exp['comment'] and not exp['is_ignored']:
                        message += f" ({exp['comment']})"
                    message += f"\n   üìÖ {exp['date'].strftime('%d.%m %H:%M')}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_my_stats")],
            [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
        ]
        back_button = InlineKeyboardMarkup(keyboard)
        await safe_send_callback_message(query, message, reply_markup=back_button)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤: {e}")
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_my_stats")],
            [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
        ]
        back_button = InlineKeyboardMarkup(keyboard)
        await safe_send_callback_message(query, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤.", reply_markup=back_button)

async def family_budget_callback(query, context):
    """–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    
    week_expenses = filter_expenses_by_period(expenses, "week")
    week_total = sum(exp['amount'] for exp in week_expenses)
    
    month_expenses = filter_expenses_by_period(expenses, "month")
    month_total = sum(exp['amount'] for exp in month_expenses)
    
    if not month_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å."
    else:
        users_month = {}
        for exp in month_expenses:
            user = exp['user']
            users_month[user] = users_month.get(user, 0) + exp['amount']
        
        categories_month = {}
        for exp in month_expenses:
            category = exp['category']
            categories_month[category] = categories_month.get(category, 0) + exp['amount']
        
        message = "üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç:\n\n"
        message += f"üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {week_total:.2f} –≥—Ä–Ω\n"
        message += f"üìÖ –ó–∞ –º—ñ—Å—è—Ü—å: {month_total:.2f} –≥—Ä–Ω\n"
        
        if week_total > 0:
            projected_month = (week_total / 7) * 30
            message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å: {projected_month:.2f} –≥—Ä–Ω\n"
        
        message += "\nüë• –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—ñ–º'—ó:\n"
        for user, amount in sorted(users_month.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / month_total) * 100
            message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        
        message += "\nüìÇ –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n"
        for category, amount in sorted(categories_month.items(), key=lambda x: x[1], reverse=True)[:5]:
            percentage = (amount / month_total) * 100
            message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def family_budget_prev_month_callback(query, context):
    """–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    
    prev_month_expenses = filter_expenses_by_period(expenses, "prev_month")
    prev_month_total = sum(exp['amount'] for exp in prev_month_expenses)
    
    if not prev_month_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å."
    else:
        users_prev_month = {}
        for exp in prev_month_expenses:
            user = exp['user']
            users_prev_month[user] = users_prev_month.get(user, 0) + exp['amount']
        
        categories_prev_month = {}
        for exp in prev_month_expenses:
            category = exp['category']
            categories_prev_month[category] = categories_prev_month.get(category, 0) + exp['amount']
        
        message = f"üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å:\n\n"
        message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {prev_month_total:.2f} –≥—Ä–Ω\n"
        message += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(prev_month_expenses)}\n\n"
        
        # –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
        message += "üë• –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö:\n"
        for user, amount in sorted(users_prev_month.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / prev_month_total) * 100
            message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        message += "\nüèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n"
        top_categories = sorted(categories_prev_month.items(), key=lambda x: x[1], reverse=True)[:5]
        for category, amount in top_categories:
            percentage = (amount / prev_month_total) * 100
            message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def compare_users_callback(query, context):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å."
    else:
        users_stats = {}
        total_amount = 0
        
        for exp in filtered_expenses:
            user = exp['user']
            if user not in users_stats:
                users_stats[user] = {'total': 0, 'count': 0, 'categories': {}}
            
            users_stats[user]['total'] += exp['amount']
            users_stats[user]['count'] += 1
            total_amount += exp['amount']
            
            category = exp['category']
            if category not in users_stats[user]['categories']:
                users_stats[user]['categories'][category] = 0
            users_stats[user]['categories'][category] += exp['amount']
        
        message = "üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
        message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —Å—ñ–º'—ó: {total_amount:.2f} –≥—Ä–Ω\n\n"
        
        sorted_users = sorted(users_stats.items(), key=lambda x: x[1]['total'], reverse=True)
        
        for i, (user, stats) in enumerate(sorted_users, 1):
            percentage = (stats['total'] / total_amount) * 100
            avg_expense = stats['total'] / stats['count']
            
            message += f"{i}. üë§ {user}:\n"
            message += f"   üí∞ {stats['total']:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
            message += f"   üìù {stats['count']} –∑–∞–ø–∏—Å—ñ–≤\n"
            message += f"   üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} –≥—Ä–Ω\n"
            
            top_categories = sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True)[:3]
            message += "   üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: "
            message += ", ".join([f"{cat} ({amt:.0f}‚Ç¥)" for cat, amt in top_categories])
            message += "\n\n"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def compare_users_prev_month_callback(query, context):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "prev_month")
    
    if not filtered_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."
    else:
        users = {}
        for exp in filtered_expenses:
            user = exp['user']
            users[user] = users.get(user, 0) + exp['amount']
        
        total = sum(users.values())
        
        message = "üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å:\n\n"
        
        for user, amount in sorted(users.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total) * 100
            message += f"üë§ {user}:\n"
            message += f"   üí∞ –°—É–º–∞: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            user_expenses = [exp for exp in filtered_expenses if exp['user'] == user]
            user_categories = {}
            for exp in user_expenses:
                category = exp['category']
                user_categories[category] = user_categories.get(category, 0) + exp['amount']
            
            top_categories = sorted(user_categories.items(), key=lambda x: x[1], reverse=True)[:3]
            message += "   üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: "
            message += ", ".join([f"{cat} ({amt:.0f}‚Ç¥)" for cat, amt in top_categories])
            message += "\n\n"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

    # === –†–ï–®–¢–ê CALLBACK –§–£–ù–ö–¶–Ü–ô ===

async def who_spent_more_callback(query, context):
    """–•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤ —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å."
    else:
        users = {}
        for exp in filtered_expenses:
            user = exp['user']
            users[user] = users.get(user, 0) + exp['amount']
        
        if len(users) < 2:
            message = "–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."
        else:
            sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
            total = sum(users.values())
            
            message = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:\n\n"
            
            for i, (user, amount) in enumerate(sorted_users, 1):
                percentage = (amount / total) * 100
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                message += f"{emoji} {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
            
            if len(sorted_users) >= 2:
                difference = sorted_users[0][1] - sorted_users[1][1]
                message += f"\nüí∏ –†—ñ–∑–Ω–∏—Ü—è: {difference:.2f} –≥—Ä–Ω"
                
                if difference > 0:
                    message += f"\nüí° {sorted_users[0][0]} –≤–∏—Ç—Ä–∞—Ç–∏–≤ –±—ñ–ª—å—à–µ –Ω–∞ {difference:.2f} –≥—Ä–Ω"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def who_spent_more_prev_month_callback(query, context):
    """–•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "prev_month")
    
    if not filtered_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É."
    else:
        users = {}
        for exp in filtered_expenses:
            user = exp['user']
            users[user] = users.get(user, 0) + exp['amount']
        
        total = sum(users.values())
        
        message = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å:\n\n"
        
        for position, (user, amount) in enumerate(sorted(users.items(), key=lambda x: x[1], reverse=True), 1):
            percentage = (amount / total) * 100
            
            if position == 1:
                emoji = "ü•á"
            elif position == 2:
                emoji = "ü•à"
            elif position == 3:
                emoji = "ü•â"
            else:
                emoji = f"{position}."
                
            message += f"{emoji} {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        
        message += f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω"
        message += f"\nüìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {len(filtered_expenses)}"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_family_stats")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def stats_today_callback(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "day")
    message = generate_stats_message(filtered_expenses, "—Å—å–æ–≥–æ–¥–Ω—ñ")
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_periods")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def stats_week_callback(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "week")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å")
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_periods")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def stats_month_callback(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å")
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_periods")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def stats_prev_month_callback(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "prev_month")
    message = generate_stats_message(filtered_expenses, "–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å")
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_periods")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def top_categories_callback(query, context):
    """–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —á–µ—Ä–µ–∑ callback"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        message = "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å."
    else:
        categories = {}
        for exp in filtered_expenses:
            category = exp['category']
            categories[category] = categories.get(category, 0) + exp['amount']
        
        total = sum(categories.values())
        
        message = "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
        for i, (category, amount) in enumerate(sorted(categories.items(), key=lambda x: x[1], reverse=True), 1):
            percentage = (amount / total) * 100
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            message += f"{emoji} {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_periods")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def budget_status_callback(query, context):
    """–°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É —á–µ—Ä–µ–∑ callback"""
    global family_budget_amount
    
    if family_budget_amount == 0:
        message = ("‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                  "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /budget –°–£–ú–ê –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É.")
    else:
        expenses = get_all_expenses()
        month_expenses = filter_expenses_by_period(expenses, "month")
        spent = sum(exp['amount'] for exp in month_expenses)
        
        remaining = family_budget_amount - spent
        percentage = (spent / family_budget_amount) * 100
        
        message = f"üí∞ –°—Ç–∞—Ç—É—Å —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É:\n\n"
        message += f"üìä –ë—é–¥–∂–µ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å: {family_budget_amount:.2f} –≥—Ä–Ω\n"
        message += f"üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        
        if remaining > 0:
            message += f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining:.2f} –≥—Ä–Ω\n"
            
            import calendar
            now = datetime.datetime.now()
            days_in_month = calendar.monthrange(now.year, now.month)[1]
            days_passed = now.day
            days_remaining = days_in_month - days_passed
            
            if days_remaining > 0:
                daily_budget = remaining / days_remaining
                message += f"üìÖ –ú–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ {daily_budget:.2f} –≥—Ä–Ω –Ω–∞ –¥–µ–Ω—å\n"
        else:
            message += f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: {abs(remaining):.2f} –≥—Ä–Ω\n"
        
        progress_length = 10
        filled_length = int(progress_length * percentage / 100)
        bar = "‚ñà" * filled_length + "‚ñë" * (progress_length - filled_length)
        message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å: {bar} {percentage:.1f}%"
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_budget")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def undo_last_action_callback(query, context):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó —á–µ—Ä–µ–∑ callback"""
    user = query.from_user
    
    if user.id not in user_last_actions:
        message = "‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    else:
        last_action = user_last_actions[user.id]
        
        if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
            message = "‚ùå –ß–∞—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω)."
        else:
            try:
                result = sheet.values().get(
                    spreadsheetId=SPREADSHEET_ID,
                    range=RANGE_NAME
                ).execute()
                
                values = result.get('values', [])
                if not values:
                    message = "‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è."
                else:
                    user_name = user.username or user.first_name or "Unknown"
                    row_to_delete = None
                    
                    for i, row in enumerate(values):
                        if len(row) >= 4:
                            if (row[0] == last_action['date'] and 
                                row[1] == last_action['category'] and 
                                float(row[2]) == last_action['amount'] and
                                row[3] == user_name):
                                row_to_delete = i + 1
                                break
                    
                    if row_to_delete is None:
                        message = "‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
                    else:
                        requests = [{
                            'deleteDimension': {
                                'range': {
                                    'sheetId': 0,
                                    'dimension': 'ROWS',
                                    'startIndex': row_to_delete - 1,
                                    'endIndex': row_to_delete
                                }
                            }
                        }]
                        
                        sheet.batchUpdate(
                            spreadsheetId=SPREADSHEET_ID,
                            body={'requests': requests}
                        ).execute()
                        
                        del user_last_actions[user.id]
                        
                        message = (f"‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ:\n"
                                 f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
                                 f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω")
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
                message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É."
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_management")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def mark_as_ignored_callback(query, context):
    """–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ callback"""
    user = query.from_user
    
    if user.id not in user_last_actions:
        message = "‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è."
    else:
        last_action = user_last_actions[user.id]
        
        if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
            message = "‚ùå –ß–∞—Å –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω)."
        else:
            try:
                result = sheet.values().get(
                    spreadsheetId=SPREADSHEET_ID,
                    range=RANGE_NAME
                ).execute()
                
                values = result.get('values', [])
                if not values:
                    message = "‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è."
                else:
                    user_name = user.username or user.first_name or "Unknown"
                    row_to_update = None
                    
                    for i, row in enumerate(values):
                        if len(row) >= 4:
                            if (row[0] == last_action['date'] and 
                                row[1] == last_action['category'] and 
                                float(row[2]) == last_action['amount'] and
                                row[3] == user_name):
                                row_to_update = i + 1
                                break
                    
                    if row_to_update is None:
                        message = "‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è."
                    else:
                        current_comment = last_action.get('comment', '')
                        new_comment = f"[IGNORED] {current_comment}".strip()
                        
                        range_to_update = f"'–ê—Ä–∫—É—à1'!E{row_to_update}"
                        sheet.values().update(
                            spreadsheetId=SPREADSHEET_ID,
                            range=range_to_update,
                            valueInputOption='USER_ENTERED',
                            body={'values': [[new_comment]]}
                        ).execute()
                        
                        del user_last_actions[user.id]
                        
                        message = (f"üîï –ó–∞–ø–∏—Å –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π:\n"
                                 f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
                                 f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω\n"
                                 f"üí° –í—ñ–Ω –Ω–µ –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å —É —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ")
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è: {e}")
                message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É."
    
    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="menu_management")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ])
    await safe_send_callback_message(query, message, reply_markup=back_button)

async def show_help(query):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤–Ω—É –¥–æ–≤—ñ–¥–∫—É"""
    ffmpeg_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if FFMPEG_PATH else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    help_message = (
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–µ—Å—Ç–∏ —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç.\n\n"
        "üìù –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –á–∂–∞ 250 –û–±—ñ–¥ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ\n\n"
        f"üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {ffmpeg_status}\n\n"
        "üìä –û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "/mystats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/recent - —Ç–≤–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤\n\n"
        "üë´ –°—ñ–º–µ–π–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "/family - –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç\n"
        "/compare - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –º—ñ–∂ –≤–∞–º–∏\n"
        "/whospent - —Ö—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤\n\n"
        "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏:\n"
        "/today - –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/week - –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "/month - –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/prevmonth - –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å\n"
        "/top - —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n\n"
        "üí∞ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É:\n"
        "/budget 15000 - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç\n"
        "/budget_status - —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É\n\n"
        "üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏:\n"
        "/undo - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å\n"
        "/ignore - –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π\n\n"
        "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üìã –ú–µ–Ω—é¬ª –≤–Ω–∏–∑—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É!"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_menu")]
    ]
    back_button = InlineKeyboardMarkup(keyboard)
    await safe_send_callback_message(query, help_message, reply_markup=back_button)

# === –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø START ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é –º–µ–Ω—é"""
    welcome_message = (
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–µ—Å—Ç–∏ —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç.\n\n"
        "üìù –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –á–∂–∞ 250 –û–±—ñ–¥ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ\n\n"
        "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´üìã –ú–µ–Ω—é¬ª –≤–Ω–∏–∑—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π!"
    )
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await safe_send_message(update, context, welcome_message)

# === –û–ù–û–í–õ–ï–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    text = update.message.text.strip()
    user = update.message.from_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
    if text == "üü© üìã –ú–ï–ù–Æ üìã üü©":
        await show_main_menu(update, context)
        return
    
    # –Ü–Ω–∞–∫—à–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–∞–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏
    await process_and_save(text, user, update, context)

# === –§–£–ù–ö–¶–Ü–á –û–ë–†–û–ë–ö–ò –¢–ï–ö–°–¢–Ü–í –¢–ê –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ===


def normalize_category(category):
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É"""
    if not category:
        return category
    
    # –û—á–∏—â—É—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    category = category.strip()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ Title Case (–ü–µ—Ä—à–∞ –õ—ñ—Ç–µ—Ä–∞ –ö–æ–∂–Ω–æ–≥–æ –°–ª–æ–≤–∞ –í–µ–ª–∏–∫–∞)
    # –¶–µ –∑—Ä–æ–±–∏—Ç—å: "–ø—Ä–æ–¥—É–∫—Ç–∏" ‚Üí "–ü—Ä–æ–¥—É–∫—Ç–∏", "–ü–†–û–î–£–ö–¢–ò" ‚Üí "–ü—Ä–æ–¥—É–∫—Ç–∏"
    normalized = category.title()
    
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—è–∫—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
    # –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ Title Case –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤
    corrections = {
        "–ù–∞": "–Ω–∞",      # "–û–±—ñ–¥–∏ –ù–∞ –†–æ–±–æ—Ç—ñ" ‚Üí "–û–±—ñ–¥–∏ –Ω–∞ –†–æ–±–æ—Ç—ñ"
        "–î–æ": "–¥–æ",      # "–î–æ—Ä–æ–≥–∞ –î–æ –î–æ–º—É" ‚Üí "–î–æ—Ä–æ–≥–∞ –¥–æ –î–æ–º—É"  
        "–í": "–≤",        # "–á–∂–∞ –í –ö–∞—Ñ–µ" ‚Üí "–á–∂–∞ –≤ –ö–∞—Ñ–µ"
        "–ó": "–∑",        # "–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –ó –ú–∞–≥–∞–∑–∏–Ω—É" ‚Üí "–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –∑ –ú–∞–≥–∞–∑–∏–Ω—É"
        "–Ü": "—ñ",        # "–•–ª—ñ–± –Ü –ú–æ–ª–æ–∫–æ" ‚Üí "–•–ª—ñ–± —ñ –ú–æ–ª–æ–∫–æ"
        "–¢–∞": "—Ç–∞",      # "–§—Ä—É–∫—Ç–∏ –¢–∞ –û–≤–æ—á—ñ" ‚Üí "–§—Ä—É–∫—Ç–∏ —Ç–∞ –û–≤–æ—á—ñ"
        "–î–ª—è": "–¥–ª—è",    # "–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –î–ª—è –î—ñ—Ç–µ–π" ‚Üí "–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –¥–ª—è –î—ñ—Ç–µ–π"
        "–ü–æ": "–ø–æ",      # "–í–∏—Ç—Ä–∞—Ç–∏ –ü–æ –î–æ–º—É" ‚Üí "–í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –î–æ–º—É"
    }
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    for wrong, correct in corrections.items():
        normalized = normalized.replace(f" {wrong} ", f" {correct} ")
    
    return normalized

def parse_expense_text(text):
    """–†–æ–∑–±–∏—Ä–∞—î —Ç–µ–∫—Å—Ç –≤–∏—Ç—Ä–∞—Ç–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç–æ—Å–ª—ñ–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–¥–æ 3 —Å–ª—ñ–≤)"""
    text = text.strip()
    
    # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç—ñ (—Ü–µ –±—É–¥–µ —Å—É–º–∞)
    amount_pattern = r'\b(\d+(?:[.,]\d+)?)\b'
    amount_match = re.search(amount_pattern, text)
    
    if not amount_match:
        return None, None, None
    
    # –ü–æ–∑–∏—Ü—ñ—è –¥–µ –∑–Ω–∞–π—à–ª–∏ —Å—É–º—É
    amount_start = amount_match.start()
    amount_str = amount_match.group(1).replace(',', '.')
    
    try:
        amount = float(amount_str)
    except ValueError:
        return None, None, None
    
    # –í—Å–µ –¥–æ —Å—É–º–∏ - —Ü–µ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
    category_text = text[:amount_start].strip()
    
    # –í—Å–µ –ø—ñ—Å–ª—è —Å—É–º–∏ - —Ü–µ –∫–æ–º–µ–Ω—Ç–∞—Ä
    comment_start = amount_match.end()
    comment = text[comment_start:].strip()
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é - –Ω–µ –±—ñ–ª—å—à–µ 3 —Å–ª—ñ–≤
    if not category_text:
        return None, None, None
    
    category_words = category_text.split()
    
    # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 —Å–ª—ñ–≤ –º–∞–∫—Å–∏–º—É–º
    if len(category_words) > 3:
        category = ' '.join(category_words[:3])
        # –†–µ—à—Ç—É —Å–ª—ñ–≤ –¥–æ–¥–∞—î–º–æ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        remaining_words = ' '.join(category_words[3:])
        if comment:
            comment = remaining_words + ' ' + comment
        else:
            comment = remaining_words
    else:
        category = category_text
    
    # –ù–û–†–ú–ê–õ–Ü–ó–£–Ñ–ú–û –ö–ê–¢–ï–ì–û–†–Ü–Æ
    category = normalize_category(category)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
    if amount <= 0:
        return None, None, None
    
    return category, amount, comment

async def process_and_save(text, user, update, context):
    """–û–±—Ä–æ–±–ª—è—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤–∏—Ç—Ä–∞—Ç—É"""
    category, amount, comment = parse_expense_text(text)
    
    if category is None or amount is None:
        await safe_send_message(update, context,
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –á–∂–∞ 250 –û–±—ñ–¥"
        )
        return

    if amount <= 0:
        await safe_send_message(update, context, "‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
        return

    # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ß–ê–°–û–í–û–ì–û –ü–û–Ø–°–£ - –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å (UTC + 3)
    utc_now = datetime.datetime.utcnow()
    kyiv_time = utc_now + timedelta(hours=3)  # UTC + 3 –≥–æ–¥–∏–Ω–∏ = –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å
    date_str = kyiv_time.strftime("%Y-%m-%d %H:%M:%S")
    
    user_name = user.username or user.first_name or "Unknown"

    values = [[date_str, category, amount, user_name, comment]]

    try:
        logger.info(f"–°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Å—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ {SPREADSHEET_ID}")
        
        result = sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            valueInputOption='USER_ENTERED',
            body={'values': values}
        ).execute()
        
        logger.info(f"–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–∏–π: {result}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç–∞–∫–æ–∂ –∑ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º)
        kyiv_timestamp = utc_now + timedelta(hours=3)
        add_user_action(user.id, {
            'action': 'add',
            'date': date_str,
            'category': category,
            'amount': amount,
            'comment': comment,
            'row_range': result.get('updates', {}).get('updatedRange', ''),
            'timestamp': kyiv_timestamp  # –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –¥–ª—è timestamp —Ç–µ–∂
        })
        
        success_message = (
            f"‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
            f"üí∞ –°—É–º–∞: {amount:.2f} –≥—Ä–Ω\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
            f"üïí –ß–∞—Å: {kyiv_time.strftime('%H:%M:%S')}"  # –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        )
        if comment:
            success_message += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
        
        success_message += f"\n\nüí° –Ø–∫—â–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /undo –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
            
        await safe_send_message(update, context, success_message)
        
    except Exception as e:
        logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–æ Google Sheets: {e}")
        logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
        await safe_send_message(update, context, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")
        # === –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–Ü –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê (–ù–ï–ó–ú–Ü–ù–ï–ù–Ü) ===

async def stats_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "day")
    message = generate_stats_message(filtered_expenses, "—Å—å–æ–≥–æ–¥–Ω—ñ")
    await safe_send_message(update, context, message)

async def stats_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "week")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å")
    await safe_send_message(update, context, message)

async def stats_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å")
    await safe_send_message(update, context, message)

async def stats_prev_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "prev_month")
    message = generate_stats_message(filtered_expenses, "–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å")
    await safe_send_message(update, context, message)

async def stats_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "year")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫")
    await safe_send_message(update, context, message)

async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    user = update.message.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month", user_name)
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å", user_name)
    await safe_send_message(update, context, message)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ stats_month"""
    await stats_month(update, context)

async def top_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        await safe_send_message(update, context, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    categories = {}
    for exp in filtered_expenses:
        category = exp['category']
        categories[category] = categories.get(category, 0) + exp['amount']
    
    total = sum(categories.values())
    
    message = "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
    for i, (category, amount) in enumerate(sorted(categories.items(), key=lambda x: x[1], reverse=True), 1):
        percentage = (amount / total) * 100
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        message += f"{emoji} {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await safe_send_message(update, context, message)

async def undo_last_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å–æ–≤—É—î –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.message.from_user
    
    if user.id not in user_last_actions:
        await safe_send_message(update, context, "‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return
    
    last_action = user_last_actions[user.id]
    
    if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
        await safe_send_message(update, context, "‚ùå –ß–∞—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω).")
        return
    
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await safe_send_message(update, context, "‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        user_name = user.username or user.first_name or "Unknown"
        row_to_delete = None
        
        for i, row in enumerate(values):
            if len(row) >= 4:
                if (row[0] == last_action['date'] and 
                    row[1] == last_action['category'] and 
                    float(row[2]) == last_action['amount'] and
                    row[3] == user_name):
                    row_to_delete = i + 1
                    break
        
        if row_to_delete is None:
            await safe_send_message(update, context, "‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return
        
        requests = [{
            'deleteDimension': {
                'range': {
                    'sheetId': 0,
                    'dimension': 'ROWS',
                    'startIndex': row_to_delete - 1,
                    'endIndex': row_to_delete
                }
            }
        }]
        
        sheet.batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={'requests': requests}
        ).execute()
        
        del user_last_actions[user.id]
        
        await safe_send_message(update, context,
            f"‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
            f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
        await safe_send_message(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.")

async def mark_as_ignored(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–Ω–∞—á–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user = update.message.from_user
    
    if user.id not in user_last_actions:
        await safe_send_message(update, context, "‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è.")
        return
    
    last_action = user_last_actions[user.id]
    
    if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
        await safe_send_message(update, context, "‚ùå –ß–∞—Å –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω).")
        return
    
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await safe_send_message(update, context, "‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        user_name = user.username or user.first_name or "Unknown"
        row_to_update = None
        
        for i, row in enumerate(values):
            if len(row) >= 4:
                if (row[0] == last_action['date'] and 
                    row[1] == last_action['category'] and 
                    float(row[2]) == last_action['amount'] and
                    row[3] == user_name):
                    row_to_update = i + 1
                    break
        
        if row_to_update is None:
            await safe_send_message(update, context, "‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è.")
            return
        
        current_comment = last_action.get('comment', '')
        new_comment = f"[IGNORED] {current_comment}".strip()
        
        range_to_update = f"'–ê—Ä–∫—É—à1'!E{row_to_update}"
        sheet.values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=range_to_update,
            valueInputOption='USER_ENTERED',
            body={'values': [[new_comment]]}
        ).execute()
        
        del user_last_actions[user.id]
        
        await safe_send_message(update, context,
            f"üîï –ó–∞–ø–∏—Å –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
            f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω\n"
            f"üí° –í—ñ–Ω –Ω–µ –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å —É —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è: {e}")
        await safe_send_message(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.")

async def show_recent_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.message.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await safe_send_message(update, context, "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            return
        
        user_expenses = []
        for i, row in enumerate(values[1:], 2):
            if len(row) >= 4 and row[3] == user_name:
                try:
                    date_obj = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                    user_expenses.append({
                        'row': i,
                        'date': date_obj,
                        'category': row[1],
                        'amount': float(row[2]),
                        'comment': row[4] if len(row) > 4 else "",
                        'is_ignored': len(row) > 4 and '[IGNORED]' in row[4]
                    })
                except (ValueError, IndexError):
                    continue
        
        if not user_expenses:
            await safe_send_message(update, context, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            return
        
        user_expenses.sort(key=lambda x: x['date'], reverse=True)
        recent_expenses = user_expenses[:5]
        
        message = "üìù –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:\n\n"
        for i, exp in enumerate(recent_expenses, 1):
            ignored_mark = "üîï " if exp['is_ignored'] else ""
            message += f"{i}. {ignored_mark}{exp['category']}: {exp['amount']:.2f} –≥—Ä–Ω"
            if exp['comment'] and not exp['is_ignored']:
                message += f" ({exp['comment']})"
            message += f"\n   üìÖ {exp['date'].strftime('%d.%m %H:%M')}\n\n"
        
        message += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /undo –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó\n"
        message += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /ignore –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π"
        
        await safe_send_message(update, context, message)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤: {e}")
        await safe_send_message(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤.")

async def compare_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        await safe_send_message(update, context, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    users_stats = {}
    total_amount = 0
    
    for exp in filtered_expenses:
        user = exp['user']
        if user not in users_stats:
            users_stats[user] = {'total': 0, 'count': 0, 'categories': {}}
        
        users_stats[user]['total'] += exp['amount']
        users_stats[user]['count'] += 1
        total_amount += exp['amount']
        
        category = exp['category']
        if category not in users_stats[user]['categories']:
            users_stats[user]['categories'][category] = 0
        users_stats[user]['categories'][category] += exp['amount']
    
    message = "üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
    message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —Å—ñ–º'—ó: {total_amount:.2f} –≥—Ä–Ω\n\n"
    
    sorted_users = sorted(users_stats.items(), key=lambda x: x[1]['total'], reverse=True)
    
    for i, (user, stats) in enumerate(sorted_users, 1):
        percentage = (stats['total'] / total_amount) * 100
        avg_expense = stats['total'] / stats['count']
        
        message += f"{i}. üë§ {user}:\n"
        message += f"   üí∞ {stats['total']:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        message += f"   üìù {stats['count']} –∑–∞–ø–∏—Å—ñ–≤\n"
        message += f"   üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} –≥—Ä–Ω\n"
        
        top_categories = sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True)[:3]
        message += "   üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: "
        message += ", ".join([f"{cat} ({amt:.0f}‚Ç¥)" for cat, amt in top_categories])
        message += "\n\n"
    
    await safe_send_message(update, context, message)

async def family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —Ä–æ–∑–±–∏–≤–∫–æ—é"""
    expenses = get_all_expenses()
    
    week_expenses = filter_expenses_by_period(expenses, "week")
    week_total = sum(exp['amount'] for exp in week_expenses)
    
    month_expenses = filter_expenses_by_period(expenses, "month")
    month_total = sum(exp['amount'] for exp in month_expenses)
    
    if not month_expenses:
        await safe_send_message(update, context, "–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    users_month = {}
    for exp in month_expenses:
        user = exp['user']
        users_month[user] = users_month.get(user, 0) + exp['amount']
    
    categories_month = {}
    for exp in month_expenses:
        category = exp['category']
        categories_month[category] = categories_month.get(category, 0) + exp['amount']
    
    message = "üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç:\n\n"
    message += f"üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {week_total:.2f} –≥—Ä–Ω\n"
    message += f"üìÖ –ó–∞ –º—ñ—Å—è—Ü—å: {month_total:.2f} –≥—Ä–Ω\n"
    
    if week_total > 0:
        projected_month = (week_total / 7) * 30
        message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å: {projected_month:.2f} –≥—Ä–Ω\n"
    
    message += "\nüë• –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—ñ–º'—ó:\n"
    for user, amount in sorted(users_month.items(), key=lambda x: x[1], reverse=True):
        percentage = (amount / month_total) * 100
        message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    message += "\nüìÇ –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n"
    for category, amount in sorted(categories_month.items(), key=lambda x: x[1], reverse=True)[:5]:
        percentage = (amount / month_total) * 100
        message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await safe_send_message(update, context, message)

async def who_spent_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
    period = "month"
    
    if context.args:
        period_arg = context.args[0].lower()
        if period_arg in ["today", "week", "month", "year"]:
            period = period_arg if period_arg != "today" else "day"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, period)
    
    if not filtered_expenses:
        period_names = {"day": "—Å—å–æ–≥–æ–¥–Ω—ñ", "week": "—Ç–∏–∂–¥–µ–Ω—å", "month": "–º—ñ—Å—è—Ü—å", "year": "—Ä—ñ–∫"}
        await safe_send_message(update, context, f"–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_names.get(period, period)}.")
        return
    
    users = {}
    for exp in filtered_expenses:
        user = exp['user']
        users[user] = users.get(user, 0) + exp['amount']
    
    if len(users) < 2:
        await safe_send_message(update, context, "–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.")
        return
    
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    total = sum(users.values())
    
    period_names = {"day": "—Å—å–æ–≥–æ–¥–Ω—ñ", "week": "—Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è", "month": "—Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è", "year": "—Ü—å–æ–≥–æ —Ä–æ–∫—É"}
    period_name = period_names.get(period, period)
    
    message = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç {period_name}:\n\n"
    
    for i, (user, amount) in enumerate(sorted_users, 1):
        percentage = (amount / total) * 100
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        message += f"{emoji} {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    if len(sorted_users) >= 2:
        difference = sorted_users[0][1] - sorted_users[1][1]
        message += f"\nüí∏ –†—ñ–∑–Ω–∏—Ü—è: {difference:.2f} –≥—Ä–Ω"
        
        if difference > 0:
            message += f"\nüí° {sorted_users[0][0]} –≤–∏—Ç—Ä–∞—Ç–∏–≤ –±—ñ–ª—å—à–µ –Ω–∞ {difference:.2f} –≥—Ä–Ω"
    
    await safe_send_message(update, context, message)

async def set_family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if not context.args:
        await safe_send_message(update, context,
            "üí∞ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç:\n"
            "/budget 15000 - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç 15000 –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å\n"
            "/budget - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç"
        )
        return
    
    try:
        budget_amount = float(context.args[0])
        family_budget_amount = budget_amount
        
        await safe_send_message(update, context,
            f"üí∞ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {budget_amount:.2f} –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å\n"
            f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /budget_status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"
        )
        
    except ValueError:
        await safe_send_message(update, context, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É. –ü—Ä–∏–∫–ª–∞–¥: /budget 15000")

async def budget_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if family_budget_amount == 0:
        await safe_send_message(update, context,
            "‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /budget –°–£–ú–ê –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É."
        )
        return
    
    expenses = get_all_expenses()
    month_expenses = filter_expenses_by_period(expenses, "month")
    spent = sum(exp['amount'] for exp in month_expenses)
    
    remaining = family_budget_amount - spent
    percentage = (spent / family_budget_amount) * 100
    
    message = f"üí∞ –°—Ç–∞—Ç—É—Å —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É:\n\n"
    message += f"üìä –ë—é–¥–∂–µ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å: {family_budget_amount:.2f} –≥—Ä–Ω\n"
    message += f"üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    if remaining > 0:
        message += f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining:.2f} –≥—Ä–Ω\n"
        
        import calendar
        now = datetime.datetime.now()
        days_in_month = calendar.monthrange(now.year, now.month)[1]
        days_passed = now.day
        days_remaining = days_in_month - days_passed
        
        if days_remaining > 0:
            daily_budget = remaining / days_remaining
            message += f"üìÖ –ú–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ {daily_budget:.2f} –≥—Ä–Ω –Ω–∞ –¥–µ–Ω—å\n"
    else:
        message += f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: {abs(remaining):.2f} –≥—Ä–Ω\n"
    
    progress_length = 10
    filled_length = int(progress_length * percentage / 100)
    bar = "‚ñà" * filled_length + "‚ñë" * (progress_length - filled_length)
    message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å: {bar} {percentage:.1f}%"
    
    await safe_send_message(update, context, message)

# === –û–ë–†–û–ë–ö–ê –ì–û–õ–û–°–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    voice = update.message.voice
    
    if FFMPEG_PATH is None:
        await safe_send_message(update, context,
            "‚ùå –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "FFmpeg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )
        return
    
    if voice.duration > MAX_VOICE_DURATION:
        await safe_send_message(update, context,
            f"‚ùå –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {MAX_VOICE_DURATION} —Å–µ–∫—É–Ω–¥."
        )
        return
    
    async def send_processing_message():
        return await update.message.reply_text("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    processing_message = await safe_bot_operation(send_processing_message)
    
    ogg_path = None
    wav_path = None
    
    try:
        file = await context.bot.get_file(voice.file_id)
        
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tf_ogg:
            await file.download_to_drive(custom_path=tf_ogg.name)
            ogg_path = tf_ogg.name

        wav_path = ogg_path.replace(".ogg", ".wav")
        
        try:
            # –î–æ–¥–∞—î–º–æ timeout –¥–ª—è FFmpeg
            result = subprocess.run([
                FFMPEG_PATH, "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path, "-y"
            ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, 
               timeout=FFMPEG_TIMEOUT)
        except subprocess.TimeoutExpired:
            async def edit_message():
                return await processing_message.edit_text("‚ùå –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ.")
            await safe_bot_operation(edit_message)
            logger.error("FFmpeg timeout")
            return
        except subprocess.CalledProcessError as e:
            async def edit_message():
                return await processing_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ.")
            await safe_bot_operation(edit_message)
            logger.error(f"ffmpeg error: {e}")
            return

        with open(wav_path, "rb") as audio_file:
            content = audio_file.read()

        audio = speech.RecognitionAudio(content=content)
        config = speech.RecognitionConfig(
            encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=16000,
            language_code=SPEECH_LANGUAGE,
            enable_automatic_punctuation=True,
            enable_word_time_offsets=False
        )

        response = speech_client.recognize(config=config, audio=audio)
        
        if not response.results:
            async def edit_message():
                return await processing_message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫—ñ—à–µ.")
            await safe_bot_operation(edit_message)
            return
        
        recognized_text = response.results[0].alternatives[0].transcript
        confidence = response.results[0].alternatives[0].confidence
        
        logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: '{recognized_text}' (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.2f})")
        
        async def delete_message():
            return await processing_message.delete()
        await safe_bot_operation(delete_message)
        
        await safe_send_message(update, context, f"üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: \"{recognized_text}\"")
        
        await process_and_save(recognized_text, user, update, context)
        
    except Exception as e:
        logger.error(f"Google Speech-to-Text error: {e}")
        async def edit_message():
            return await processing_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –≥–æ–ª–æ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await safe_bot_operation(edit_message)
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        for path in [ogg_path, wav_path]:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                    logger.debug(f"–í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {path}")
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª {path}: {e}")

# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

async def test_sheets_access():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets"""
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="A1:A1"
        ).execute()
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets: {e}")
        return False

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f'Update {update} caused error {context.error}')
    
    if update and update.effective_message:
        try:
            await safe_send_message(update, context, 
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

def add_handlers(app):
    """–î–æ–¥–∞—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ –¥–æ–¥–∞—Ç–∫—É"""
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("today", stats_today))
    app.add_handler(CommandHandler("week", stats_week))
    app.add_handler(CommandHandler("month", stats_month))
    app.add_handler(CommandHandler("prevmonth", stats_prev_month))
    app.add_handler(CommandHandler("year", stats_year))
    app.add_handler(CommandHandler("mystats", my_stats))
    app.add_handler(CommandHandler("top", top_categories))
    
    # –ö–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏
    app.add_handler(CommandHandler("undo", undo_last_action))
    app.add_handler(CommandHandler("ignore", mark_as_ignored))
    app.add_handler(CommandHandler("recent", show_recent_expenses))
    
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–∞—Ä
    app.add_handler(CommandHandler("compare", compare_users))
    app.add_handler(CommandHandler("family", family_budget))
    app.add_handler(CommandHandler("whospent", who_spent_more))
    app.add_handler(CommandHandler("budget", set_family_budget))
    app.add_handler(CommandHandler("budget_status", budget_status))
    
    # –û–ë–†–û–ë–ù–ò–ö CALLBACK –ó–ê–ü–ò–¢–Ü–í
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∫–ª—é—á–∞—é—á–∏ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é")
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)

# === –ü–û–ö–†–ê–©–ï–ù–ù–Ø 1: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ polling ===

# === –î–û–î–ê–ô–¢–ï –¶–Ü –§–£–ù–ö–¶–Ü–á –ü–ï–†–ï–î async def main(): ===

async def safe_start_polling(app, max_retries=8):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø—É—Å–∫ polling –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø—ñ—Å–ª—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤"""
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            logger.info(f"üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É polling #{retry_count + 1}")
            
            # –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ application —Ç–∞ updater –≥–æ—Ç–æ–≤—ñ
            if not hasattr(app, 'updater') or not app.updater:
                logger.error("‚ùå Updater –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –í–∏–∫–ª–∏—á—Ç–µ app.initialize() —Å–ø–æ—á–∞—Ç–∫—É")
                raise RuntimeError("Application was not initialized via 'app.initialize()'!")
                
            if not hasattr(app.bot, '_request') or not app.bot._request:
                logger.error("‚ùå HTTP request –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –í–∏–∫–ª–∏—á—Ç–µ app.initialize() —Å–ø–æ—á–∞—Ç–∫—É")
                raise RuntimeError("Application was not initialized via 'app.initialize()'!")
                
            logger.info("‚úÖ Application –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫—É polling")
            
            await app.updater.start_polling(
                drop_pending_updates=True,
                bootstrap_retries=5,
                timeout=30,
                read_timeout=35,
                write_timeout=35,
                connect_timeout=20,
                allowed_updates=["message", "callback_query"],
                poll_interval=1.0
            )
            
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return True
            
        except Exception as e:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç
            error_msg = str(e).lower()
            if "conflict" in error_msg or "terminated by other getupdates" in error_msg:
                retry_count += 1
                wait_time = min(30 * retry_count, 180)  # Exponential backoff: 30, 60, 90, 120, 150, 180 —Å–µ–∫
                
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ Telegram API (—Å–ø—Ä–æ–±–∞ {retry_count}/{max_retries})")
                logger.warning(f"üïê –ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                
                if retry_count < max_retries:
                    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    try:
                        await app.bot.delete_webhook(drop_pending_updates=True)
                        logger.info("üßπ –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è webhook –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é")
                        await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
                    except Exception as cleanup_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è: {cleanup_error}")
                    
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ polling")
                    raise
            else:
                logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É polling: {e}")
                raise
    
    return False

async def graceful_shutdown(app):
    """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º —Ä–µ—Å—É—Ä—Å—ñ–≤"""
    logger.info("üõë –ü–æ—á–∞—Ç–æ–∫ graceful shutdown...")
    
    try:
        # –ó—É–ø–∏–Ω—è—î–º–æ updater
        if hasattr(app, 'updater') and app.updater.running:
            logger.info("üîÑ –ó—É–ø–∏–Ω—è—î–º–æ updater...")
            await app.updater.stop()
            logger.info("‚úÖ Updater –∑—É–ø–∏–Ω–µ–Ω–æ")
        
        # –ó—É–ø–∏–Ω—è—î–º–æ application
        if hasattr(app, 'running') and app.running:
            logger.info("üîÑ –ó—É–ø–∏–Ω—è—î–º–æ application...")
            await app.stop()
            logger.info("‚úÖ Application –∑—É–ø–∏–Ω–µ–Ω–æ")
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ application
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à—É—î–º–æ application...")
        await app.shutdown()
        logger.info("‚úÖ Application –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ graceful shutdown: {e}")
    
    logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def clear_webhook_and_pending_updates(bot):
    """–û—á–∏—â–∞—î webhook —Ç–∞ pending updates –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤"""
    try:
        logger.info("üßπ –û—á–∏—â–µ–Ω–Ω—è webhook —Ç–∞ pending updates...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ webhook —è–∫—â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω–æ")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        await asyncio.sleep(3)
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ webhook: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FinDotBot –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤...")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
    def signal_handler_improved(signum, frame):
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. Graceful shutdown...")
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        asyncio.create_task(cleanup_and_exit())
    
    async def cleanup_and_exit():
        try:
            if 'app' in locals():
                await graceful_shutdown(app)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ cleanup: {e}")
        finally:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            logger.info("‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑—É–ø–∏–Ω–∫–∞ event loop")
    
    signal.signal(signal.SIGTERM, signal_handler_improved)
    signal.signal(signal.SIGINT, signal_handler_improved)
    
    if not os.path.exists(SERVICE_ACCOUNT_FILE):
        logger.error(f"‚ùå –§–∞–π–ª —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {SERVICE_ACCOUNT_FILE}")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets
    try:
        await test_sheets_access()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets: {e}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    app = create_application()
    
    try:
        # –ü–†–ê–í–ò–õ–¨–ù–ê –ü–û–°–õ–Ü–î–û–í–ù–Ü–°–¢–¨ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –¥–ª—è python-telegram-bot 20.x –∑ retry –ª–æ–≥—ñ–∫–æ—é
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è application...")
        
        # Retry –ª–æ–≥—ñ–∫–∞ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        init_retry_count = 0
        max_init_retries = 3
        
        while init_retry_count < max_init_retries:
            try:
                await app.initialize()
                logger.info(f"‚úÖ Application —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (—Å–ø—Ä–æ–±–∞ {init_retry_count + 1})")
                break
            except Exception as init_error:
                init_retry_count += 1
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó (—Å–ø—Ä–æ–±–∞ {init_retry_count}/{max_init_retries}): {init_error}")
                
                if init_retry_count >= max_init_retries:
                    logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ application –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
                    raise
                    
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if not app.updater:
            logger.error("‚ùå Updater –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return
            
        if not hasattr(app.bot, '_request') or not app.bot._request:
            logger.error("‚ùå HTTP request –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            return
            
        logger.info("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ –ü–Ü–°–õ–Ø —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        add_handlers(app)
        
        await app.start()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Application –ø—ñ—Å–ª—è start()
        logger.info("‚è≥ –û—á—ñ–∫—É—î–º–æ –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Application...")
        await asyncio.sleep(2)
        
        logger.info("‚úÖ FinDotBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏...")
        if FFMPEG_PATH:
            logger.info("üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ")
        else:
            logger.warning("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ (FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)")
        
        # –û–ß–ò–©–ï–ù–ù–Ø –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
        await clear_webhook_and_pending_updates(app.bot)
        
        # –ë–ï–ó–ü–ï–ß–ù–ò–ô –ó–ê–ü–£–°–ö POLLING
        polling_started = await safe_start_polling(app)
        
        if polling_started:
            logger.info("üéØ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ —Ç–∞ –æ—á—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º
            error_count = 0
            max_errors = 10
            
            while True:
                try:
                    await asyncio.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ updater —â–µ –ø—Ä–∞—Ü—é—î
                    if hasattr(app, 'updater') and not app.updater.running:
                        logger.warning("‚ö†Ô∏è Updater –∑—É–ø–∏–Ω–∏–≤—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏...")
                        await safe_start_polling(app)
                    
                    # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π —Ä–æ–±–æ—Ç—ñ
                    error_count = 0
                    
                except Exception as e:
                    error_msg = str(e).lower()
                    if "conflict" in error_msg or "terminated by other getupdates" in error_msg:
                        error_count += 1
                        logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ ({error_count}/{max_errors})")
                        
                        if error_count >= max_errors:
                            logger.error("‚ùå –ó–∞–±–∞–≥–∞—Ç–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É")
                            break
                        
                        await asyncio.sleep(30)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    else:
                        error_count += 1
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e} ({error_count}/{max_errors})")
                        
                        if error_count >= max_errors:
                            logger.error("‚ùå –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É")
                            break
                        
                        await asyncio.sleep(10)
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ polling")
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É—î–º–æ graceful shutdown
        await graceful_shutdown(app)

if __name__ == '__main__':
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ run.py –¥–ª—è –∑–∞–ø—É—Å–∫—É
    logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ run.py –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑–∞–º—ñ—Å—Ç—å finedot_bot.py")
    asyncio.run(main())