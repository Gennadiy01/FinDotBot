import logging
import datetime
import os
import tempfile
import subprocess
import async def family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —Ä–æ–∑–±–∏–≤–∫–æ—é"""
    expenses = get_all_expenses()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
    week_expenses = filter_expenses_by_period(expenses, "week")
    week_total = sum(exp['amount'] for exp in week_expenses)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
    month_expenses = filter_expenses_by_period(expenses, "month")
    month_total = sum(exp['amount'] for exp in month_expenses)
    
    if not month_expenses:
        await update.message.reply_text("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    # –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö –∑–∞ –º—ñ—Å—è—Ü—å
    users_month = {}
    for exp in month_expenses:
        user = exp['user']
        users_month[user] = users_month.get(user, 0) + exp['amount']
    
    # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –∑–∞ –º—ñ—Å—è—Ü—å
    categories_month = {}
    for exp in month_expenses:
        category = exp['category']
        categories_month[category] = categories_month.get(category, 0) + exp['amount']
    
    # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
    message = "üíº –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç:\n\n"
    
    message += f"üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {week_total:.2f} –≥—Ä–Ω\n"
    message += f"üìÖ –ó–∞ –º—ñ—Å—è—Ü—å: {month_total:.2f} –≥—Ä–Ω\n"
    
    if week_total > 0:
        projected_month = (week_total / 7) * 30
        message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å: {projected_month:.2f} –≥—Ä–Ω\n"
    
    message += "\nüë• –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—ñ–º'—ó:\n"
    for user, amount in sorted(users_month.items(), key=lambda x: x[1], reverse=True):
        percentage = (amount / month_total) * 100
        message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    message += "\nüìÇ –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n"
    for category, amount in sorted(categories_month.items(), key=lambda x: x[1], reverse=True)[:5]:
        percentage = (amount / month_total) * 100
        message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await update.message.reply_text(message)

async def who_spent_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä—ñ–æ–¥—É –∑ –∫–æ–º–∞–Ω–¥–∏
    period = "month"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º—ñ—Å—è—Ü—å
    
    if context.args:
        period_arg = context.args[0].lower()
        if period_arg in ["today", "week", "month", "year"]:
            period = period_arg if period_arg != "today" else "day"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, period)
    
    if not filtered_expenses:
        period_names = {"day": "—Å—å–æ–≥–æ–¥–Ω—ñ", "week": "—Ç–∏–∂–¥–µ–Ω—å", "month": "–º—ñ—Å—è—Ü—å", "year": "—Ä—ñ–∫"}
        await update.message.reply_text(f"–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_names.get(period, period)}.")
        return
    
    # –†–∞—Ö—É—î–º–æ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    for exp in filtered_expenses:
        user = exp['user']
        users[user] = users.get(user, 0) + exp['amount']
    
    if len(users) < 2:
        await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.")
        return
    
    # –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    total = sum(users.values())
    
    period_names = {"day": "—Å—å–æ–≥–æ–¥–Ω—ñ", "week": "—Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è", "month": "—Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è", "year": "—Ü—å–æ–≥–æ —Ä–æ–∫—É"}
    period_name = period_names.get(period, period)
    
    message = f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç {period_name}:\n\n"
    
    for i, (user, amount) in enumerate(sorted_users, 1):
        percentage = (amount / total) * 100
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        message += f"{emoji} {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    # –î–æ–¥–∞—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –ø–µ—Ä—à–∏–º —ñ –¥—Ä—É–≥–∏–º
    if len(sorted_users) >= 2:
        difference = sorted_users[0][1] - sorted_users[1][1]
        message += f"\nüí∏ –†—ñ–∑–Ω–∏—Ü—è: {difference:.2f} –≥—Ä–Ω"
        
        if difference > 0:
            message += f"\nüí° {sorted_users[0][0]} –≤–∏—Ç—Ä–∞—Ç–∏–≤ –±—ñ–ª—å—à–µ –Ω–∞ {difference:.2f} –≥—Ä–Ω"
    
    await update.message.reply_text(message)

async def set_family_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if not context.args:
        await update.message.reply_text(
            "üí∞ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç:\n"
            "/budget 15000 - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç 15000 –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å\n"
            "/budget - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç"
        )
        return
    
    try:
        budget_amount = float(context.args[0])
        family_budget_amount = budget_amount
        
        await update.message.reply_text(
            f"üí∞ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {budget_amount:.2f} –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å\n"
            f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /budget_status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É. –ü—Ä–∏–∫–ª–∞–¥: /budget 15000")

async def budget_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É"""
    global family_budget_amount
    
    if family_budget_amount == 0:
        await update.message.reply_text(
            "‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /budget –°–£–ú–ê –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É."
        )
        return
    
    expenses = get_all_expenses()
    month_expenses = filter_expenses_by_period(expenses, "month")
    spent = sum(exp['amount'] for exp in month_expenses)
    
    remaining = family_budget_amount - spent
    percentage = (spent / family_budget_amount) * 100
    
    message = f"üí∞ –°—Ç–∞—Ç—É—Å —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É:\n\n"
    message += f"üìä –ë—é–¥–∂–µ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å: {family_budget_amount:.2f} –≥—Ä–Ω\n"
    message += f"üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    if remaining > 0:
        message += f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining:.2f} –≥—Ä–Ω\n"
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
        import calendar
        now = datetime.datetime.now()
        days_in_month = calendar.monthrange(now.year, now.month)[1]
        days_passed = now.day
        days_remaining = days_in_month - days_passed
        
        if days_remaining > 0:
            daily_budget = remaining / days_remaining
            message += f"üìÖ –ú–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ {daily_budget:.2f} –≥—Ä–Ω –Ω–∞ –¥–µ–Ω—å\n"
    else:
        message += f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: {abs(remaining):.2f} –≥—Ä–Ω\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
    progress_length = 10
    filled_length = int(progress_length * percentage / 100)
    bar = "‚ñà" * filled_length + "‚ñë" * (progress_length - filled_length)
    message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å: {bar} {percentage:.1f}%"
    
    await update.message.reply_text(message)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    voice = update.message.voice
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π FFmpeg
    if FFMPEG_PATH is None:
        await update.message.reply_text(
            "‚ùå –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "FFmpeg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if voice.duration > MAX_VOICE_DURATION:
        await update.message.reply_text(
            f"‚ùå –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {MAX_VOICE_DURATION} —Å–µ–∫—É–Ω–¥."
        )
        return
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    processing_message = await update.message.reply_text("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        file = await context.bot.get_file(voice.file_id)
        
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tf_ogg:
            await file.download_to_drive(custom_path=tf_ogg.name)
            ogg_path = tf_ogg.name

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ OGG —É WAV
        wav_path = ogg_path.replace(".ogg", ".wav")
        
        try:
            subprocess.run([
                FFMPEG_PATH, "-i", ogg_path, "-ar", "16000", "-ac", "1", wav_path, "-y"
            ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except subprocess.CalledProcessError as e:
            await processing_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ.")
            logger.error(f"ffmpeg error: {e}")
            os.unlink(ogg_path)
            return
        
        os.unlink(ogg_path)

        # –ß–∏—Ç–∞—î–º–æ WAV —Ñ–∞–π–ª
        with open(wav_path, "rb") as audio_file:
            content = audio_file.read()
        os.unlink(wav_path)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
        audio = speech.RecognitionAudio(content=content)
        config = speech.RecognitionConfig(
            encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=16000,
            language_code=SPEECH_LANGUAGE,
            enable_automatic_punctuation=True,
            enable_word_time_offsets=False
        )

        # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ –º–æ–≤—É
        response = speech_client.recognize(config=config, audio=audio)
        
        if not response.results:
            await processing_message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫—ñ—à–µ.")
            return
        
        recognized_text = response.results[0].alternatives[0].transcript
        confidence = response.results[0].alternatives[0].confidence
        
        logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: '{recognized_text}' (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.2f})")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await processing_message.delete()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await update.message.reply_text(f"üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: \"{recognized_text}\"")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        await process_and_save(recognized_text, user, update)
        
    except Exception as e:
        logger.error(f"Google Speech-to-Text error: {e}")
        await processing_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –≥–æ–ª–æ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

def parse_expense_text(text):
    """–†–æ–∑–±–∏—Ä–∞—î —Ç–µ–∫—Å—Ç –≤–∏—Ç—Ä–∞—Ç–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    text = text.strip()
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 1: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä
    parts = text.split(maxsplit=2)
    if len(parts) >= 2:
        category = parts[0]
        amount_str = parts[1]
        comment = parts[2] if len(parts) == 3 else ""
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —á–∏—Å–ª–æ –∑ —Ä—è–¥–∫–∞
        amount_match = re.search(r'(\d+(?:[.,]\d+)?)', amount_str)
        if amount_match:
            amount_str = amount_match.group(1).replace(',', '.')
            try:
                amount = float(amount_str)
                return category, amount, comment
            except ValueError:
                pass
    
    return None, None, None

async def process_and_save(text, user, update):
    """–û–±—Ä–æ–±–ª—è—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤–∏—Ç—Ä–∞—Ç—É"""
    category, amount, comment = parse_expense_text(text)
    
    if category is None or amount is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –á–∂–∞ 250 –û–±—ñ–¥"
        )
        return

    if amount <= 0:
        await update.message.reply_text("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
        return

    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_name = user.username or user.first_name or "Unknown"

    values = [[date_str, category, amount, user_name, comment]]

    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        logger.info(f"–°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Å—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ {SPREADSHEET_ID}")
        
        result = sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            valueInputOption='USER_ENTERED',
            body={'values': values}
        ).execute()
        
        logger.info(f"–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–∏–π: {result}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_last_actions[user.id] = {
            'action': 'add',
            'date': date_str,
            'category': category,
            'amount': amount,
            'comment': comment,
            'row_range': result.get('updates', {}).get('updatedRange', ''),
            'timestamp': datetime.datetime.now()
        }
        
        success_message = (
            f"‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
            f"üí∞ –°—É–º–∞: {amount:.2f} –≥—Ä–Ω\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}"
        )
        if comment:
            success_message += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
        
        success_message += f"\n\nüí° –Ø–∫—â–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /undo –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
            
        await update.message.reply_text(success_message)
        
    except Exception as e:
        logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–æ Google Sheets: {e}")
        logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")

def test_sheets_access():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets"""
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="A1:A1"
        ).execute()
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets: {e}")
        return False

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f'Update {update} caused error {context.error}')

async def main():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    if not os.path.exists(SERVICE_ACCOUNT_FILE):
        logger.error(f"–§–∞–π–ª —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {SERVICE_ACCOUNT_FILE}")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets
    try:
        test_sheets_access()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets: {e}")
    
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("today", today_stats))
    app.add_handler(CommandHandler("week", week_stats))
    app.add_handler(CommandHandler("month", month_stats))
    app.add_handler(CommandHandler("year", year_stats))
    app.add_handler(CommandHandler("mystats", my_stats))
    app.add_handler(CommandHandler("top", top_categories))
    
    # –ö–û–ú–ê–ù–î–ò —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏
    app.add_handler(CommandHandler("undo", undo_last))
    app.add_handler(CommandHandler("ignore", ignore_last))
    app.add_handler(CommandHandler("recent", recent_records))
    
    # –ù–û–í–Ü –ö–û–ú–ê–ù–î–ò –¥–ª—è –ø–∞—Ä
    app.add_handler(CommandHandler("compare", compare_users))
    app.add_handler(CommandHandler("family", family_budget))
    app.add_handler(CommandHandler("whospent", who_spent_more))
    app.add_handler(CommandHandler("budget", set_family_budget))
    app.add_handler(CommandHandler("budget_status", budget_status))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    if FFMPEG_PATH:
        logger.info("–ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ")
    else:
        logger.warning("–ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ (FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)")
    
    # –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–ü–£–°–ö - –∑–∞–º—ñ—Å—Ç—å app.run_polling()
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        # –¢—Ä–∏–º–∞—î–º–æ –±–æ—Ç–∞ –∂–∏–≤–∏–º
        while True:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑—É–ø–∏–Ω–µ–Ω–Ω—è
        try:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}")io
import re
import platform
from datetime import timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.helpers import escape_markdown

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from google.cloud import speech

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import (
    TOKEN, 
    SPREADSHEET_ID, 
    RANGE_NAME, 
    SERVICE_ACCOUNT_FILE,
    SPEECH_LANGUAGE,
    LOG_LEVEL,
    MAX_VOICE_DURATION
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_last_actions = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è FFmpeg
def get_ffmpeg_path():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å FFmpeg —É —Å–∏—Å—Ç–µ–º—ñ –∞–±–æ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ø–∞–ø—Ü—ñ"""
    # –°–ø—Ä–æ–±—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π FFmpeg
    local_ffmpeg = os.path.join(os.getcwd(), "ffmpeg", "bin", "ffmpeg.exe")
    if os.path.exists(local_ffmpeg):
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω–∏–π FFmpeg: {local_ffmpeg}")
        return local_ffmpeg
    
    # –°–ø—Ä–æ–±—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π FFmpeg
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True, text=True)
        logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω–∏–π FFmpeg")
        return "ffmpeg"
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.warning("FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —à–ª—è—Ö—É FFmpeg
FFMPEG_PATH = get_ffmpeg_path()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets API
try:
    creds = Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    logger.info("Google Sheets API –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets API: {e}")
    raise

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Speech-to-Text API
try:
    speech_client = speech.SpeechClient.from_service_account_file(SERVICE_ACCOUNT_FILE)
    logger.info("Google Speech-to-Text API –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Speech-to-Text API: {e}")
    raise

def get_all_expenses():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏—Ç—Ä–∞—Ç –∑ Google Sheets"""
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            return []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏
        expenses = []
        for row in values[1:]:
            if len(row) >= 3:
                try:
                    date_str = row[0]
                    category = row[1]
                    amount = float(row[2])
                    user = row[3] if len(row) > 3 else "Unknown"
                    comment = row[4] if len(row) > 4 else ""
                    
                    # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É
                    date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                    
                    expenses.append({
                        'date': date_obj,
                        'category': category,
                        'amount': amount,
                        'user': user,
                        'comment': comment
                    })
                except (ValueError, IndexError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å: {row}, –ø–æ–º–∏–ª–∫–∞: {e}")
                    continue
        
        return expenses
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç: {e}")
        return []

def filter_expenses_by_period(expenses, period_type, user_filter=None, include_ignored=False):
    """–§—ñ–ª—å—Ç—Ä—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º"""
    now = datetime.datetime.now()
    
    if period_type == "day":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "week":
        # –¢–∏–∂–¥–µ–Ω—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞
        days_since_monday = now.weekday()
        start_date = (now - timedelta(days=days_since_monday)).replace(hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "month":
        start_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period_type == "year":
        start_date = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        return expenses
    
    filtered = [exp for exp in expenses if exp['date'] >= start_date]
    
    # –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if user_filter:
        filtered = [exp for exp in filtered if exp['user'] == user_filter]
    
    # –í–∏–∫–ª—é—á–∞—î–º–æ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ (—è–∫—â–æ –Ω–µ –∑–∞–ø–∏—Ç–∞–ª–∏ —ó—Ö –≤–∫–ª—é—á–∏—Ç–∏)
    if not include_ignored:
        filtered = [exp for exp in filtered if not ('[IGNORED]' in exp.get('comment', ''))]
    
    return filtered

def generate_stats_message(expenses, period_name, user_filter=None):
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
    if not expenses:
        return f"–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ {period_name.lower()}."
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
    total = sum(exp['amount'] for exp in expenses)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for exp in expenses:
        category = exp['category']
        categories[category] = categories.get(category, 0) + exp['amount']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users = {}
    for exp in expenses:
        user = exp['user']
        users[user] = users.get(user, 0) + exp['amount']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}"
    if user_filter:
        message += f" (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_filter})"
    message += ":\n\n"
    
    message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω\n"
    message += f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(expenses)}\n"
    message += f"üìÖ –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {total/len(expenses):.2f} –≥—Ä–Ω\n\n"
    
    # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    message += "üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n"
    for category, amount in sorted(categories.items(), key=lambda x: x[1], reverse=True):
        percentage = (amount / total) * 100
        message += f"‚Ä¢ {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    # –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö (—è–∫—â–æ –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–º—É)
    if not user_filter and len(users) > 1:
        message += "\nüë§ –ü–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö:\n"
        for user, amount in sorted(users.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total) * 100
            message += f"‚Ä¢ {user}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    return message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ffmpeg_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if FFMPEG_PATH else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    welcome_message = (
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–µ—Å—Ç–∏ —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç.\n\n"
        "üìù –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –°—É–º–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –á–∂–∞ 250 –û–±—ñ–¥ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ\n\n"
        f"üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {ffmpeg_status}\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
        [KeyboardButton("üìà –ó–∞ —Ç–∏–∂–¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –º—ñ—Å—è—Ü—å")],
        [KeyboardButton("üë´ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç"), KeyboardButton("üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")],
        [KeyboardButton("üìù –ú–æ—ó –∑–∞–ø–∏—Å–∏"), KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")],
        [KeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–∞–Ω—è—î —Ä–æ–∑–º—ñ—Ä
        one_time_keyboard=False  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–¥–∏–º–æ—é
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤–Ω—É –¥–æ–≤—ñ–¥–∫—É"""
    help_text = (
        "üìñ –ü–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìù **–ó–∞–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç:**\n"
        "–á–∂–∞ 250 –û–±—ñ–¥ - —Ç–µ–∫—Å—Ç–æ–º\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        "/today - –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/week - –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "/month - –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/mystats - –æ—Å–æ–±–∏—Å—Ç–∞\n\n"
        "üë´ **–°—ñ–º–µ–π–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n"
        "/family - —Å—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç\n"
        "/compare - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è\n"
        "/whospent - —Ä–µ–π—Ç–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç\n\n"
        "üõ†Ô∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
        "/undo - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π\n"
        "/ignore - —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏\n"
        "/recent - –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏\n\n"
        "üí∞ **–ë—é–¥–∂–µ—Ç:**\n"
        "/budget 15000 - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏\n"
        "/budget_status - —Å—Ç–∞—Ç—É—Å"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏"""
    
    # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data='undo')],
        [InlineKeyboardButton("üîï –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data='ignore')],
        [InlineKeyboardButton("üë• –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data='compare')],
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç—É", callback_data='budget_status')],
        [InlineKeyboardButton("üèÖ –•—Ç–æ –±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç–∏–≤", callback_data='whospent')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚öôÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ fake update –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    fake_update = Update(
        update_id=update.update_id,
        message=query.message
    )
    
    if query.data == 'undo':
        await undo_last_action(fake_update, context)
    elif query.data == 'ignore':
        await mark_as_ignored(fake_update, context)
    elif query.data == 'compare':
        await compare_users(fake_update, context)
    elif query.data == 'budget_status':
        await budget_status(fake_update, context)
    elif query.data == 'whospent':
        await who_spent_more(fake_update, context)

async def handle_button_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–Ω–æ–ø–∫–∞ –∞–±–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await my_stats(update, context)
    elif text == "üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
        await today_stats(update, context)
    elif text == "üìà –ó–∞ —Ç–∏–∂–¥–µ–Ω—å":
        await week_stats(update, context)
    elif text == "üìÜ –ó–∞ –º—ñ—Å—è—Ü—å":
        await month_stats(update, context)
    elif text == "üë´ –°—ñ–º–µ–π–Ω–∏–π –±—é–¥–∂–µ—Ç":
        await family_budget(update, context)
    elif text == "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π":
        await top_categories(update, context)
    elif text == "üìù –ú–æ—ó –∑–∞–ø–∏—Å–∏":
        await recent_records(update, context)
    elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è":
        await show_management_menu(update, context)
    elif text == "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞":
        await help_command(update, context)
    else:
        # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –≤–∏—Ç—Ä–∞—Ç—É
        await process_and_save(text, update.message.from_user, update)

async def today_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "day")
    message = generate_stats_message(filtered_expenses, "—Å—å–æ–≥–æ–¥–Ω—ñ")
    await update.message.reply_text(message)

async def week_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "week")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å")
    await update.message.reply_text(message)

async def month_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å")
    await update.message.reply_text(message)

async def year_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "year")
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫")
    await update.message.reply_text(message)

async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
    user = update.message.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month", user_name)
    message = generate_stats_message(filtered_expenses, "–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å", user_name)
    await update.message.reply_text(message)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ month_stats"""
    await month_stats(update, context)

async def top_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        await update.message.reply_text("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    # –†–∞—Ö—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for exp in filtered_expenses:
        category = exp['category']
        categories[category] = categories.get(category, 0) + exp['amount']
    
    total = sum(categories.values())
    
    message = "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
    for i, (category, amount) in enumerate(sorted(categories.items(), key=lambda x: x[1], reverse=True), 1):
        percentage = (amount / total) * 100
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        message += f"{emoji} {category}: {amount:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
    
    await update.message.reply_text(message)

async def undo_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å–æ–≤—É—î –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.message.from_user
    
    if user.id not in user_last_actions:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return
    
    last_action = user_last_actions[user.id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä–∞ –¥—ñ—è (–±—ñ–ª—å—à–µ 10 —Ö–≤–∏–ª–∏–Ω)
    if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
        await update.message.reply_text("‚ùå –ß–∞—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω).")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await update.message.reply_text("‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        # –®—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        user_name = user.username or user.first_name or "Unknown"
        row_to_delete = None
        
        for i, row in enumerate(values):
            if len(row) >= 4:
                if (row[0] == last_action['date'] and 
                    row[1] == last_action['category'] and 
                    float(row[2]) == last_action['amount'] and
                    row[3] == user_name):
                    row_to_delete = i + 1  # +1 —Ç–æ–º—É —â–æ Google Sheets –ø–æ—á–∏–Ω–∞—î –∑ 1
                    break
        
        if row_to_delete is None:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–æ–∫
        requests = [{
            'deleteDimension': {
                'range': {
                    'sheetId': 0,  # –ü–µ—Ä—à–∏–π –∞—Ä–∫—É—à
                    'dimension': 'ROWS',
                    'startIndex': row_to_delete - 1,  # 0-based index
                    'endIndex': row_to_delete
                }
            }
        }]
        
        sheet.batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={'requests': requests}
        ).execute()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∫–µ—à—É
        del user_last_actions[user.id]
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
            f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.")

async def ignore_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–Ω–∞—á–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user = update.message.from_user
    
    if user.id not in user_last_actions:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è.")
        return
    
    last_action = user_last_actions[user.id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä–∞ –¥—ñ—è
    if datetime.datetime.now() - last_action['timestamp'] > timedelta(minutes=10):
        await update.message.reply_text("‚ùå –ß–∞—Å –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –º–∏–Ω—É–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Ö–≤–∏–ª–∏–Ω).")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await update.message.reply_text("‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        # –®—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
        user_name = user.username or user.first_name or "Unknown"
        row_to_update = None
        
        for i, row in enumerate(values):
            if len(row) >= 4:
                if (row[0] == last_action['date'] and 
                    row[1] == last_action['category'] and 
                    float(row[2]) == last_action['amount'] and
                    row[3] == user_name):
                    row_to_update = i + 1  # +1 —Ç–æ–º—É —â–æ Google Sheets –ø–æ—á–∏–Ω–∞—î –∑ 1
                    break
        
        if row_to_update is None:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è.")
            return
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å [IGNORED] –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        current_comment = last_action.get('comment', '')
        new_comment = f"[IGNORED] {current_comment}".strip()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä
        range_to_update = f"'–ê—Ä–∫—É—à1'!E{row_to_update}"
        sheet.values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=range_to_update,
            valueInputOption='USER_ENTERED',
            body={'values': [[new_comment]]}
        ).execute()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∫–µ—à—É
        del user_last_actions[user.id]
        
        await update.message.reply_text(
            f"üîï –ó–∞–ø–∏—Å –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {last_action['category']}\n"
            f"üí∞ –°—É–º–∞: {last_action['amount']:.2f} –≥—Ä–Ω\n"
            f"üí° –í—ñ–Ω –Ω–µ –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å —É —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.")

async def recent_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.message.from_user
    user_name = user.username or user.first_name or "Unknown"
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        
        values = result.get('values', [])
        if not values:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_expenses = []
        for i, row in enumerate(values[1:], 2):  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 2-–≥–æ —Ä—è–¥–∫–∞
            if len(row) >= 4 and row[3] == user_name:
                try:
                    date_obj = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                    user_expenses.append({
                        'row': i,
                        'date': date_obj,
                        'category': row[1],
                        'amount': float(row[2]),
                        'comment': row[4] if len(row) > 4 else "",
                        'is_ignored': len(row) > 4 and '[IGNORED]' in row[4]
                    })
                except (ValueError, IndexError):
                    continue
        
        if not user_expenses:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É) —ñ –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5
        user_expenses.sort(key=lambda x: x['date'], reverse=True)
        recent_expenses = user_expenses[:5]
        
        message = "üìù –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:\n\n"
        for i, exp in enumerate(recent_expenses, 1):
            ignored_mark = "üîï " if exp['is_ignored'] else ""
            message += f"{i}. {ignored_mark}{exp['category']}: {exp['amount']:.2f} –≥—Ä–Ω"
            if exp['comment'] and not exp['is_ignored']:
                message += f" ({exp['comment']})"
            message += f"\n   üìÖ {exp['date'].strftime('%d.%m %H:%M')}\n\n"
        
        message += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /undo –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó\n"
        message += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /ignore –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
family_budget_amount = 0

async def compare_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –∑–∞ –º—ñ—Å—è—Ü—å"""
    expenses = get_all_expenses()
    filtered_expenses = filter_expenses_by_period(expenses, "month")
    
    if not filtered_expenses:
        await update.message.reply_text("–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.")
        return
    
    # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    users_stats = {}
    total_amount = 0
    
    for exp in filtered_expenses:
        user = exp['user']
        if user not in users_stats:
            users_stats[user] = {
                'total': 0,
                'count': 0,
                'categories': {}
            }
        
        users_stats[user]['total'] += exp['amount']
        users_stats[user]['count'] += 1
        total_amount += exp['amount']
        
        category = exp['category']
        if category not in users_stats[user]['categories']:
            users_stats[user]['categories'][category] = 0
        users_stats[user]['categories'][category] += exp['amount']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = "üë´ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å:\n\n"
    message += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —Å—ñ–º'—ó: {total_amount:.2f} –≥—Ä–Ω\n\n"
    
    # –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Å—É–º–æ—é –≤–∏—Ç—Ä–∞—Ç
    sorted_users = sorted(users_stats.items(), key=lambda x: x[1]['total'], reverse=True)
    
    for i, (user, stats) in enumerate(sorted_users, 1):
        percentage = (stats['total'] / total_amount) * 100
        avg_expense = stats['total'] / stats['count']
        
        message += f"{i}. üë§ {user}:\n"
        message += f"   üí∞ {stats['total']:.2f} –≥—Ä–Ω ({percentage:.1f}%)\n"
        message += f"   üìù {stats['count']} –∑–∞–ø–∏—Å—ñ–≤\n"
        message += f"   üìä –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} –≥—Ä–Ω\n"
        
        # –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        top_categories = sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True)[:3]
        message += "   üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: "
        message += ", ".join([f"{cat} ({amt:.0f}‚Ç¥)" for cat, amt in top_categories])
        message += "\n\n"
    
    await update.message.reply_text(message)

async